time1[ncol(time1)]+t_T_C2+t_S_C2,
t_eclapse_replicated+time4c,
t_eclapse_1_replicated+time5c,
t_eclapse_1+time5c[ncol(time5c)]+0.00001,
t_eclapse_1+time5c[ncol(time5c)]+t_H_C2)
env_cond_temp <- cbind(T_F_C2, T_T_C2, T_T_C2, T_S_C2, T_S_C2,
T_S1c_C2, T_T1c_C2, T_H_C2, T_H_C2)
data <- data %>%
group_by(lot_id) %>%
mutate(P_ppc = runif(1, 0.367, 0.667))
# Assign spoilage type
result_list <- list()
for (i in 1:n_sim) {
data_lot <- subset(data, lot_id == as.character(i))
num_ppc <- round(unique(data_lot$P_ppc) * n_unit)
num_spore_unspoil <- n_unit - num_ppc
spoiler_types <- c(rep("PPC", num_ppc), rep("Spore_Unspoil", num_spore_unspoil))
data_lot$spoilage_type <- sample(spoiler_types, n_unit)
result_list[[i]] <- data_lot
}
data <- do.call(rbind,result_list)
# Assign AT/ST types
# ppc
model_data_ppc <- subset(data, spoilage_type == "PPC")
model_data_ppc$STorAT <- NA
for (i in 1:nrow(model_data_ppc)) {
sampled_value <- sample(ppc_ST_freq$ClosestST, 1, replace = T)
while (sampled_value == "9_23") {
sampled_value <- sample(ppc_ST_freq$ClosestST, 1, replace = T)
}
model_data_ppc$STorAT[i] <- sampled_value
}
model_data_ppc$STorAT <- paste0("ST_", model_data_ppc$STorAT)
# # spore
model_data_spore <- subset(data, spoilage_type == "Spore_Unspoil")
model_data_spore$STorAT <- sample(spore_AT_freq$ClosestAT, nrow(model_data_spore),replace=T)
model_data_spore$STorAT <- paste0("AT_", model_data_spore$STorAT)
# Assign initial contamination distributions
# ppc
N0_ppc = rnorm(n = nrow(model_data_ppc), mean = 0.38, sd = 1.11)
model_data_ppc$N0_MPN_ppc <- 10^N0_ppc*1900
model_data_ppc_filtered <- subset(model_data_ppc, N0_MPN_ppc < 1)
model_data_ppc_filtered$new_column <- runif(nrow(model_data_ppc_filtered))
model_data_ppc_filtered$N0_MPN_ppc_assigned <- ifelse(model_data_ppc_filtered$N0_MPN_ppc > model_data_ppc_filtered$new_column, 1,
ifelse(model_data_ppc_filtered$N0_MPN_ppc < model_data_ppc_filtered$new_column, 0, NA))
model_data_ppc_filtered <- model_data_ppc_filtered[, !(names(model_data_ppc_filtered) %in% c("N0_MPN_ppc", "new_column"))]
names(model_data_ppc_filtered)[names(model_data_ppc_filtered) == "N0_MPN_ppc_assigned"] <- "N0_MPN_ppc"
filtered_rows <- anti_join(model_data_ppc, model_data_ppc_filtered, by = c("lot_id", "unit_id"))
model_data_ppc <- rbind(filtered_rows,model_data_ppc_filtered)
model_data_ppc$N0 = model_data_ppc$N0_MPN_ppc/1900
model_data_ppc <- subset(model_data_ppc, select = -N0_MPN_ppc)
model_data_ppc <- as.data.frame(model_data_ppc)
# spore
N0_spore = rnorm(n = nrow(model_data_spore), mean = -0.72, sd = 0.99)
model_data_spore$N0_MPN_spore <- 10^N0_spore*1900
model_data_spore_filtered <- subset(model_data_spore, N0_MPN_spore < 1)
model_data_spore_filtered$new_column <- runif(nrow(model_data_spore_filtered))
model_data_spore_filtered$N0_MPN_spore_assigned <- ifelse(model_data_spore_filtered$N0_MPN_spore > model_data_spore_filtered$new_column, 1,
ifelse(model_data_spore_filtered$N0_MPN_spore < model_data_spore_filtered$new_column, 0, NA))
model_data_spore_filtered <- model_data_spore_filtered[, !(names(model_data_spore_filtered) %in% c("N0_MPN_spore", "new_column"))]
names(model_data_spore_filtered)[names(model_data_spore_filtered) == "N0_MPN_spore_assigned"] <- "N0_MPN_spore"
filtered_rows <- anti_join(model_data_spore, model_data_spore_filtered, by = c("lot_id", "unit_id"))
model_data_spore <- rbind(filtered_rows,model_data_spore_filtered)
model_data_spore$N0 = model_data_spore$N0_MPN_spore/1900
model_data_spore <- subset(model_data_spore, select = -N0_MPN_spore)
model_data_spore <- as.data.frame(model_data_spore)
# join data
model_data <- rbind(model_data_ppc,model_data_spore)
# Generate allele index
model_data$allele_index <- match(model_data$STorAT, growth_parameter$STorAT)
# Assign growth parameters
model_data$Mean_h0 <- growth_parameter$Mean_h0[model_data$allele_index]
model_data$StdDev_h0 <- growth_parameter$StdDev_h0[model_data$allele_index]
model_data$Mean_b <- growth_parameter$Mean_b[model_data$allele_index]
model_data$StdDev_b <- growth_parameter$StdDev_b[model_data$allele_index]
model_data$Mean_Nmax <- growth_parameter$Mean_LOG10Nmax[model_data$allele_index]
model_data$StdDev_Nmax <- growth_parameter$StdDev_LOG10Nmax[model_data$allele_index]
model_data$Topt <- growth_parameter$Topt[model_data$allele_index]
model_data <- model_data %>%
rowwise() %>%
mutate(h0 = rtruncnorm(n = 1,
a = 0,
mean = Mean_h0,
sd = StdDev_h0))
model_data$Q0 <- 1/(exp(model_data$h0)-1)
model_data <- model_data %>%
rowwise() %>%
mutate(b = rtruncnorm(n = 1,
a = 0,
mean = Mean_b,
sd = StdDev_b))
model_data <- model_data %>%
rowwise() %>%
mutate(Nmax = rnorm(n = 1,
mean = Mean_Nmax,
sd = StdDev_Nmax))
model_data$Nmax <- 10^(model_data$Nmax)
model_data <- model_data %>%
mutate(Tmin = case_when(
spoilage_type == "PPC" ~ -4.15,
spoilage_type == "Spore_Unspoil" ~ -3.62
))
model_data$mu_opt <- (model_data$b*(model_data$Topt-model_data$Tmin))^2
model_data <- as.data.frame(model_data)
my_times <- seq(0, 28)
num_iterations <- nrow(model_data)
all_simulations <- list()
for (i in 1:num_iterations) {
my_primary <- list(mu_opt = model_data$mu_opt[i], Nmax = model_data$Nmax[i], N0 = model_data$N0[i], Q0 = model_data$Q0[i])
sec_temperature <- list(model = "reducedRatkowsky", xmin = model_data$Tmin[i], b = model_data$b[i], xopt = model_data$Topt[i])
my_secondary <- list(temperature = sec_temperature)
growth <- predict_dynamic_growth(times = my_times,
env_conditions = tibble(time = env_cond_time[i,],
temperature = env_cond_temp[i,]),
my_primary,
my_secondary)
sim <- growth$simulation
all_simulations[[i]] <- sim
}
final_conc <- do.call(rbind, all_simulations)
model_data_1 <- model_data[rep(1:nrow(model_data), each = 29), ]
model_data_sub <- model_data_1[,c("lot_id","unit_id")]
count_result <- final_conc[,c("time","N","logN")]
df <- cbind(model_data_sub,count_result)
result <- df %>%
group_by(lot_id, time) %>%
summarise(
count_total = n(),
count_over_6 = sum(logN > 6),
percentage_over_6 = (count_over_6 / count_total) * 100
)
shelf_life_day <- result %>%
filter(percentage_over_6 > 25) %>%
group_by(lot_id) %>%
summarise(day_percentage_exceeds_25 = min(time))
write.csv(shelf_life_day, "eCommerce2c_shelflife.csv")
eCommerce2c_shelflife = read.csv("eCommerce2c_shelflife.csv")
eCommerce2a_shelflife = read.csv("eCommerce2a_shelflife.csv")
# plot
data <- list(Control_shelflife$day_percentage_exceeds_25,
eCommerce1_shelflife$day_percentage_exceeds_25,
eCommerce2a_shelflife$day_percentage_exceeds_25,
eCommerce2b_shelflife$day_percentage_exceeds_25,
eCommerce2c_shelflife$day_percentage_exceeds_25)
boxplot(data, names = c("Control", "eCommerce1", "eCommerce2a", "eCommerce2b","eCommerce2c"),
ylab = "Shelf-life days")
save.image("C:/Users/sujun/Documents/GitHub/eCommerce/eCommerce.RData")
load("~/GitHub/eCommerce/eCommerce.RData")
median(eCommerce2a_shelflife$day_percentage_exceeds_25)
median(eCommerce2b_shelflife$day_percentage_exceeds_25)
median(eCommerce2c_shelflife$day_percentage_exceeds_25)
load("~/GitHub/eCommerce/eCommerce.RData")
n_sim <- 100
n_unit <- 100
lot_id <- rep(seq(1, n_sim), each = n_unit)
unit_id <- rep(seq(1,n_unit), times = n_sim)
data <- data.frame(lot_id, unit_id)
data <- data %>%
group_by(lot_id) %>%
mutate(P_ppc = runif(1, 0.367, 0.667))
# Assign spoilage type
result_list <- list()
for (i in 1:n_sim) {
data_lot <- subset(data, lot_id == as.character(i))
num_ppc <- round(unique(data_lot$P_ppc) * n_unit)
num_spore_unspoil <- n_unit - num_ppc
spoiler_types <- c(rep("PPC", num_ppc), rep("Spore_Unspoil", num_spore_unspoil))
data_lot$spoilage_type <- sample(spoiler_types, n_unit)
result_list[[i]] <- data_lot
}
data <- do.call(rbind,result_list)
# Assign AT/ST types
# ppc
model_data_ppc <- subset(data, spoilage_type == "PPC")
model_data_ppc$STorAT <- NA
for (i in 1:nrow(model_data_ppc)) {
sampled_value <- sample(ppc_ST_freq$ClosestST, 1, replace = T)
while (sampled_value == "9_23") {
sampled_value <- sample(ppc_ST_freq$ClosestST, 1, replace = T)
}
model_data_ppc$STorAT[i] <- sampled_value
}
model_data_ppc$STorAT <- paste0("ST_", model_data_ppc$STorAT)
# # spore
model_data_spore <- subset(data, spoilage_type == "Spore_Unspoil")
model_data_spore$STorAT <- sample(spore_AT_freq$ClosestAT, nrow(model_data_spore),replace=T)
model_data_spore$STorAT <- paste0("AT_", model_data_spore$STorAT)
# Assign AT/ST types
# ppc
model_data_ppc <- subset(data, spoilage_type == "PPC")
model_data_ppc$STorAT <- NA
for (i in 1:nrow(model_data_ppc)) {
sampled_value <- sample(ppc_ST_freq$ClosestST, 1, replace = T)
while (sampled_value == "9_23") {
sampled_value <- sample(ppc_ST_freq$ClosestST, 1, replace = T)
}
model_data_ppc$STorAT[i] <- sampled_value
}
model_data_ppc$STorAT <- paste0("ST_", model_data_ppc$STorAT)
# # spore
model_data_spore <- subset(data, spoilage_type == "Spore_Unspoil")
model_data_spore$STorAT <- sample(spore_AT_freq$ClosestAT, nrow(model_data_spore),replace=T)
model_data_spore$STorAT <- paste0("AT_", model_data_spore$STorAT)
# Set work directory
setwd("C:/Users/sujun/Documents/GitHub/eCommerce")
# Load packages
library(dplyr)
library(tidyr)
library(fitdistrplus)
library(tibble)
library(EnvStats)         # to load rtri function
library(truncnorm)        # to load rtruncnorm function
library(jmuOutlier)       # to load rlaplace function
library(formula.tools)    # to load 'rhs'
library(purrr)            # to load 'map'
library(deSolve)          # to load 'ode'
library(rlang)
# Load utility functions
source("UtilityFunctions_dynamic_growth.R")
# Input data
# Growth parameters
data_ppc <- read.csv("InputData/ppc_gp.csv")
data_ppc$mumax <- 0.684 * data_ppc$mumax
data_sporeformer <- read.csv("InputData/sporeformer_gp.csv")
# AT frequency
ppc_ST_freq <- read.csv("InputData/ppc_STfreq_clean.csv")
spore_AT_freq <- read.csv("InputData/spore_ATfreq_clean.csv")
# Set seed
set.seed(1)
# Get mean and sd for PPC growth parameters h0, b, log10Nmax and Topt
data_ppc$h0 <- data_ppc$lag * data_ppc$mumax
Tmin_PPC <- -4.15
T_PPC <- 6
data_ppc$b <- sqrt(data_ppc$mumax/log(10)*24)/(T_PPC - Tmin_PPC) # mumax in log10/day
result_df <- data_ppc %>%
group_by(isolate) %>%
summarise(
Mean_h0 = mean(h0),
StdDev_h0 = sd(h0),
Mean_b = mean(b),
StdDev_b = sd(b),
Mean_LOG10Nmax = mean(LOG10Nmax),
StdDev_LOG10Nmax = sd(LOG10Nmax),
Topt = Topt
) %>%
distinct()
result_df <- as.data.frame(result_df)
result_df$STorAT <- unique(data_ppc$STorAT)
result_df$STorAT <- paste0("ST_", result_df$STorAT)
# Get mean and sd for sporeformer growth parameters h0, b, log10Nmax and Topt
data_sporeformer$h0 <- data_sporeformer$lag * data_sporeformer$mumax
Tmin_spore <- -3.62
T_spore <- 6
data_sporeformer$b <- sqrt(data_sporeformer$mumax/log(10))/(T_spore - Tmin_spore) # mumax in log10/day
result_df_1 <- data_sporeformer %>%
group_by(isolate) %>%
summarise(
Mean_h0 = h0,
StdDev_h0 = mean(result_df$StdDev_h0),
Mean_b = b,
StdDev_b = mean(result_df$StdDev_b),
Mean_LOG10Nmax = LOG10Nmax,
StdDev_LOG10Nmax = mean(result_df$StdDev_LOG10Nmax),
Topt = Topt
) %>%
distinct()
result_df_1 <- as.data.frame(result_df_1)
result_df_1$STorAT <- unique(data_sporeformer$STorAT)
result_df_1$STorAT <- paste0("AT_", result_df_1$STorAT)
# Join growth parameter data
growth_parameter <- rbind(result_df,result_df_1)
# Set up dataframe for simulation (100 lots, 100 units)
n_sim <- 100
n_unit <- 100
lot_id <- rep(seq(1, n_sim), each = n_unit)
unit_id <- rep(seq(1,n_unit), times = n_sim)
data <- data.frame(lot_id, unit_id)
data <- data %>%
group_by(lot_id) %>%
mutate(P_ppc = runif(1, 0.367, 0.667))
# Assign spoilage type
result_list <- list()
for (i in 1:n_sim) {
data_lot <- subset(data, lot_id == as.character(i))
num_ppc <- round(unique(data_lot$P_ppc) * n_unit)
num_spore_unspoil <- n_unit - num_ppc
spoiler_types <- c(rep("PPC", num_ppc), rep("Spore_Unspoil", num_spore_unspoil))
data_lot$spoilage_type <- sample(spoiler_types, n_unit)
result_list[[i]] <- data_lot
}
data <- do.call(rbind,result_list)
# Assign AT/ST types
# ppc
model_data_ppc <- subset(data, spoilage_type == "PPC")
model_data_ppc$STorAT <- NA
for (i in 1:nrow(model_data_ppc)) {
sampled_value <- sample(ppc_ST_freq$ClosestST, 1, replace = T)
while (sampled_value == "9_23") {
sampled_value <- sample(ppc_ST_freq$ClosestST, 1, replace = T)
}
model_data_ppc$STorAT[i] <- sampled_value
}
model_data_ppc$STorAT <- paste0("ST_", model_data_ppc$STorAT)
# # spore
model_data_spore <- subset(data, spoilage_type == "Spore_Unspoil")
model_data_spore$STorAT <- sample(spore_AT_freq$ClosestAT, nrow(model_data_spore),replace=T)
model_data_spore$STorAT <- paste0("AT_", model_data_spore$STorAT)
model_data_ppc
model_data_spore
rm(list=ls())
training_data <- read.csv("train_data_with_DI.csv")
testing_data <- read.csv("test_data_with_DI_new.csv")
setwd("C:/Users/sujun/Documents/GitHub/Combined-Spoilage-Model-App/Validation")
training_data <- read.csv("train_data_with_DI.csv")
testing_data <- read.csv("test_data_with_DI_new.csv")
combined_data <- rbind(training_data[,3:14],testing_data[,c(2:5,7,9,11,6,8,10,12:13)])
combined_data_sub <- subset(combined_data, Day_Initial <= 3)
combined_data_PPC <- subset(combined_data_sub,spoilagetype == "PPC")
CVTA_D7 <- log10(combined_data_PPC$CVTA_D7)
CVTA_D7 <- na.omit(CVTA_D7)
CVTA_D14 <- log10(combined_data_PPC$CVTA_D14)
CVTA_D14 <- na.omit(CVTA_D14)
CVTA_D21 <- log10(combined_data_PPC$CVTA_D21)
CVTA_D21 <- na.omit(CVTA_D21)
combined_data_Spore <- subset(combined_data_sub,spoilagetype %in% c("spore spoilage", "no spoilage"))
SPC_D1 <- combined_data_sub$SPC_DI
SPC_D7 <- log10(combined_data_Spore$SPC_D7)
SPC_D7 <- na.omit(SPC_D7)
SPC_D14 <- log10(combined_data_Spore$SPC_D14)
SPC_D14 <- na.omit(SPC_D14)
SPC_D21 <- log10(combined_data_Spore$SPC_D21)
SPC_D21 <- na.omit(SPC_D21)
View(combined_data_sub)
rm(list=ls())
load("~/GitHub/Combined-Spoilage-Model-App/Validation/Data processing.RData")
hist(SPC_D7, main = "Histogram of SPC Count (VSL D7)", xlab = "log10CFU/mL", xlim = c(0,7), breaks = 25)
median(SPC_D7)
quantile(SPC_D7,0.25)
quantile(SPC_D7,0.75)
sum(SPC_D7>6)/188
hist(SPC_D14, main = "Histogram of SPC Count (VSL D14)", xlab = "log10CFU/mL", xlim = c(0,8), breaks = 25)
median(SPC_D14)
quantile(SPC_D14,0.25)
quantile(SPC_D14,0.75)
sum(SPC_D14>6)/189
hist(SPC_D21, main = "Histogram of SPC Count (VSL D21)", xlab = "log10CFU/mL", xlim = c(0,8), breaks = 25)
median(SPC_D21)
quantile(SPC_D21,0.25)
quantile(SPC_D21,0.75)
sum(SPC_D21>6)/133
hist(CVTA_D7, main = "Histogram of  CVTA Count (VSL D7)", xlab = "log10CFU/mL", xlim = c(0,8), breaks = 25)
hist(CVTA_D7, main = "Histogram of  CVTA Count (VSL D7)", xlab = "log10CFU/mL", xlim = c(0,8), breaks = 20)
hist(CVTA_D7, main = "Histogram of  CVTA Count (VSL D7)", xlab = "log10CFU/mL", xlim = c(0,8), breaks = 25)
hist(CVTA_D7, main = "Histogram of  CVTA Count (VSL D7)", xlab = "log10CFU/mL", xlim = c(-2,8), breaks = 25)
hist(CVTA_D7, main = "Histogram of  CVTA Count (VSL D7)", xlab = "log10CFU/mL", xlim = c(-2,8), breaks = 20)
median(CVTA_D7)
quantile(CVTA_D7,0.25)
quantile(CVTA_D7,0.75)
sum(CVTA_7>6)/267
sum(CVTA_D7>6)/267
hist(CVTA_D14, main = "Histogram of  CVTA Count (VSL D14)", xlab = "log10CFU/mL", xlim = c(0,8), breaks = 20)
hist(CVTA_D14, main = "Histogram of  CVTA Count (VSL D14)", xlab = "log10CFU/mL", xlim = c(0,9), breaks = 20)
hist(CVTA_D14, main = "Histogram of  CVTA Count (VSL D14)", xlab = "log10CFU/mL", breaks = 20)
median(CVTA_D14)
qunatile(CVTA_D14,0.25)
quantile(CVTA_D14,0.25)
quantile(CVTA_D14,0.75)
sum(CVTA_D14>6)/267
hist(CVTA_D21, main = "Histogram of  CVTA Count (VSL D21)", xlab = "log10CFU/mL", breaks = 20)
median(CVTA_D21)
quantile(CVTA_D21,0.25)
quantile(CVTA_D21,0.75)
sum(CVTA_D21>6)/127
rm(list=ls())
load("~/GitHub/Combined-Spoilage-Model-App/Validation/Validation.RData")
training_data <- read.csv("train_data_with_DI.csv")
testing_data <- read.csv("test_data_with_DI_new.csv")
combined_data <- rbind(training_data[,3:14],testing_data[,c(2:5,7,9,11,6,8,10,12:13)])
combined_data_sub <- subset(combined_data, Day_Initial <= 3)
combined_data_PPC <- subset(combined_data_sub,spoilagetype == "PPC")
CVTA_D7 <- log10(combined_data_PPC$CVTA_D7)
CVTA_D7 <- na.omit(CVTA_D7)
CVTA_D14 <- log10(combined_data_PPC$CVTA_D14)
CVTA_D14 <- na.omit(CVTA_D14)
CVTA_D21 <- log10(combined_data_PPC$CVTA_D21)
CVTA_D21 <- na.omit(CVTA_D21)
combined_data <- read.csv("combined_data.csv")
combined_data$SampleID <- gsub("-\\d+", "", combined_data$SampleID)
filtered_combined_data <- subset(combined_data, !(endsWith(SampleID, "5") | endsWith(SampleID, "6")))
write.csv(filtered_combined_data,"filtered_combined_data.csv")
combined_data_sub <- subset(filtered_combined_data, Day_Initial <= 3)
View(combined_data_sub)
View(filtered_combined_data)
# Percent_Spoiled
# Group by plantID
combined_dataset_grouped <- filtered_combined_data %>%
group_by(plantID, spoilagetype) %>%
summarise(count = n()) %>%
ungroup()
libary(dplyr)
library(dplyr)
# Percent_Spoiled
# Group by plantID
combined_dataset_grouped <- filtered_combined_data %>%
group_by(plantID, spoilagetype) %>%
summarise(count = n()) %>%
ungroup()
View(filtered_combined_data)
View(combined_data)
rm(list=ls())
test_data = read.csv("test_data_tier_plant.csv")
train_data = read.csv("train_data_tier_plant.csv")
combined_dataset = rbind(test_data,train_data)
View(combined_dataset)
combined_dataset = rbind(test_data[,c(5,6,17)],train_data[,c(5,6,17)])
View(combined_dataset)
rm(list=ls())
test_data = read.csv("test_data_tier_plant.csv")
train_data = read.csv("train_data_tier_plant.csv")
combined_dataset = rbind(test_data,train_data)
View(combined_dataset)
combined_data$SampleID_real <- gsub("-\\d+", "", combined_data$SampleID_real)
combined_dataset$SampleID_real <- gsub("-\\d+", "", combined_dataset$SampleID_real)
filtered_combined_data <- subset(combined_dataset, !(endsWith(SampleID_real, "5") | endsWith(SampleID_real, "6")))
View(filtered_combined_data)
View(filtered_combined_data)
combined_dataset_grouped <- filtered_combined_data %>%
group_by(plantID, spoilagetype) %>%
summarise(count = n()) %>%
ungroup()
combined_dataset_grouped <- combined_dataset_grouped %>%
pivot_wider(names_from = spoilagetype, values_from = count, values_fill = 0)
combined_dataset_grouped$total <- rowSums(combined_dataset_grouped[, c("PPC", "spore spoilage", "no spoilage")])
percentage <- combined_dataset_grouped %>%
mutate(PPC_percent = PPC / total,
spore_percent =`spore spoilage` / total) %>%
select(plantID, PPC_percent, spore_percent)
test_data = read.csv("test_data_tier_plant.csv")
train_data = read.csv("train_data_tier_plant.csv")
combined_dataset = rbind(test_data,train_data)
combined_dataset = rbind(test_data[,c(5,6,17)],train_data[,c(5,6,17)])
View(combined_dataset)
rm(list=ls())
library(dplyr)
library(tidyr)
library(ggplot2)
test_data = read.csv("test_data_tier_plant.csv")
train_data = read.csv("train_data_tier_plant.csv")
combined_dataset = rbind(test_data,train_data)
combined_dataset$SampleID_real <- gsub("-\\d+", "", combined_dataset$SampleID_real)
filtered_combined_data <- subset(combined_dataset, !(endsWith(SampleID_real, "5") | endsWith(SampleID_real, "6")))
filtered_combined_data <- filtered_combined_data[,c(5,6,17)]
View(filtered_combined_data)
combined_dataset_grouped <- filtered_combined_data %>%
group_by(plantID, spoilagetype) %>%
summarise(count = n()) %>%
ungroup()
combined_dataset_grouped <- combined_dataset_grouped %>%
pivot_wider(names_from = spoilagetype, values_from = count, values_fill = 0)
combined_dataset_grouped$total <- rowSums(combined_dataset_grouped[, c("PPC", "spore spoilage", "no spoilage")])
percentage <- combined_dataset_grouped %>%
mutate(PPC_percent = PPC / total,
spore_percent =`spore spoilage` / total) %>%
select(plantID, PPC_percent, spore_percent)
set.seed(1)
kmeans_result_ppc <- kmeans(percentage$PPC_percent, centers = 3)
percentage$PPC_cluster <- kmeans_result_ppc$cluster
Cluster_1 <- subset(percentage, PPC_cluster == 1)
Cluster_2 <- subset(percentage, PPC_cluster == 2)
Cluster_3 <- subset(percentage, PPC_cluster == 3)
Cluster_1
Cluster_2
Cluster_3
save.image("C:/Users/sujun/Documents/GitHub/Combined-Spoilage-Model-App/Validation/Percent_Spoiled.RData")
rm(list=ls())
library(dplyr)
combined_data <- read.csv("combined_data.csv")
combined_data$SampleID <- gsub("-\\d+", "", combined_data$SampleID)
filtered_combined_data <- subset(combined_data, !(endsWith(SampleID, "5") | endsWith(SampleID, "6")))
write.csv(filtered_combined_data,"filtered_combined_data.csv")
rm(list=ls())
library(dplyr)
library(tidyr)
library(ggplot2)
test_data = read.csv("test_data_tier_plant.csv")
train_data = read.csv("train_data_tier_plant.csv")
combined_dataset = rbind(test_data,train_data)
combined_dataset$SampleID_real <- gsub("-\\d+", "", combined_dataset$SampleID_real)
filtered_combined_data <- subset(combined_dataset, !(endsWith(SampleID_real, "5") | endsWith(SampleID_real, "6")))
filtered_combined_data <- filtered_combined_data[,c(5,6,17)]
# Not group by Tier 1, 2, 3
# Group by plantID
combined_dataset_grouped <- filtered_combined_data %>%
group_by(plantID, spoilagetype) %>%
summarise(count = n()) %>%
ungroup()
combined_dataset_grouped <- combined_dataset_grouped %>%
pivot_wider(names_from = spoilagetype, values_from = count, values_fill = 0)
combined_dataset_grouped$total <- rowSums(combined_dataset_grouped[, c("PPC", "spore spoilage", "no spoilage")])
percentage <- combined_dataset_grouped %>%
mutate(PPC_percent = PPC / total,
spore_percent =`spore spoilage` / total) %>%
select(plantID, PPC_percent, spore_percent)
# Cluster by PPC_percent
set.seed(1)
kmeans_result_ppc <- kmeans(percentage$PPC_percent, centers = 3)
percentage$PPC_cluster <- kmeans_result_ppc$cluster
Cluster_1 <- subset(percentage, PPC_cluster == 1)
Cluster_2 <- subset(percentage, PPC_cluster == 2)
Cluster_3 <- subset(percentage, PPC_cluster == 3)
write.csv(percentage,"percentage.csv")
rm(list=ls())

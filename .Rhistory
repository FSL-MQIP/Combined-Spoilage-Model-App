group_by(isolate) %>%
summarise(
Mean_h0 = h0,
StdDev_h0 = mean(result_df$StdDev_h0),
Mean_b = b,
StdDev_b = mean(result_df$StdDev_b),
Mean_LOG10Nmax = LOG10Nmax,
StdDev_LOG10Nmax = mean(result_df$StdDev_LOG10Nmax),
Topt = Topt
) %>%
distinct()
result_df_1 <- as.data.frame(result_df_1)
result_df_1$STorAT <- unique(data_sporeformer$STorAT)
result_df_1$STorAT <- paste0("AT_", result_df_1$STorAT)
# Join growth parameter data
growth_parameter <- rbind(result_df,result_df_1)
# Set up dataframe for simulation (100 lots, 100 units)
n_sim <- 100
n_unit <- 100
lot_id <- rep(seq(1, n_sim), each = n_unit)
unit_id <- rep(seq(1,n_unit), times = n_sim)
data <- data.frame(lot_id, unit_id)
# Temperature profile
# Stage 1: facility storage
## (a)  Sample the temperature distribution
data$T_F <- rep(runif(n_sim*n_unit,min=3.5,max=4.5)) #uniform distribution
## (b) Sample the storage time (in days) distribution
data$t_F <- rep(runif(n_sim*n_unit,min=1,max=2)) #uniform distribution
# Stage 2: transport from facility to retail store
## (a)  Sample the temperature distribution
data$T_T <- rep(rtri(n_sim*n_unit,min=1.7,max=10.0,mode=4.4)) #triangular distribution
## (b) Sample the transportation time (in days) distribution
data$t_T <- rep(rtri(n_sim*n_unit,min=1,max=10,mode=5))
# Stage 3: storage/display at retail store
## (a)  Sample the temperature distribution
data$T_S <- rep(rtruncnorm(n_sim*n_unit,a=-1.4,b=5.4,mean=2.3,sd=1.8)) #truncated normal distribution
## (b) Sample the storage time (in days) distribution
data$t_S <- rep(rtruncnorm(n_sim*n_unit,a=0.042,b=10.0, mean=1.821,sd=3.3)) #truncated normal distribution
## Stage 4: transportation from retail store to home
## (a)  Sample the temperature distribution
data$T_T2 <- rep(rtruncnorm(n_sim*n_unit,a=0,b=10,mean=8.5,sd=1.0)) #truncated normal distribution
## (b) Sample the transportation time (in days) distribution
data$t_T2 <- rep(rtruncnorm(n_sim*n_unit,a=0.01,b=0.24, mean=0.04,sd=0.02)) #truncated normal distribution
## Stage 5: home storage
## (a)  Sample the temperature distribution
# temps <- rep(NA, n_sim*n_unit)
# for (i in 1:(n_sim*n_unit)){
# number <- rlaplace(1,m=4.06,s=2.31)
# while (number > 15 | number < -1) {
# number <- rlaplace(1,m=4.06,s=2.31) #truncated laplace distribution
# }
# temps[i] <- number
# }
# data$T_H <- temps
temps <- rep(NA, n_sim*n_unit)
for (i in 1:(n_sim*n_unit)){
number <- rlaplace(1,m=4.06,s=2.31)
while (number > 4 | number < -1) {
number <- rlaplace(1,m=4.06,s=2.31)
}
temps[i] <- number
}
data$T_H <- temps
## (b) Define shelf-life day for all units
## Day 35
data$t_H = 35
# Generate spoilage frequency and assign spoilage types
# PPC Spoilage %
# Good Plant
# data <- data %>%
# group_by(lot_id) %>%
# mutate (P_ppc = runif(1, 0.125, 0.313))
# Medium Plant
data <- data %>%
group_by(lot_id) %>%
mutate(P_ppc = runif(1, 0.367, 0.667))
# Bad Plant
# data <- data %>%
# group_by(lot_id) %>%
# mutate (P_ppc = runif(1, 0.75, 1))
# Sanity check
# data$P_ppc = 0
# Assign spoilage type
result_list <- list()
for (i in 1:n_sim) {
data_lot <- subset(data, lot_id == as.character(i))
num_ppc <- round(unique(data_lot$P_ppc) * n_unit)
num_spore_unspoil <- n_unit - num_ppc
spoiler_types <- c(rep("PPC", num_ppc), rep("Spore_Unspoil", num_spore_unspoil))
data_lot$spoilage_type <- sample(spoiler_types, n_unit)
result_list[[i]] <- data_lot
}
data <- do.call(rbind,result_list)
# Assign AT/ST types
# ppc
model_data_ppc <- subset(data, spoilage_type == "PPC")
model_data_ppc$STorAT <- NA
for (i in 1:nrow(model_data_ppc)) {
sampled_value <- sample(ppc_ST_freq$ClosestST, 1, replace = T)
while (sampled_value == "9_23") {
sampled_value <- sample(ppc_ST_freq$ClosestST, 1, replace = T)
}
model_data_ppc$STorAT[i] <- sampled_value
}
model_data_ppc$STorAT <- paste0("ST_", model_data_ppc$STorAT)
# # spore
model_data_spore <- subset(data, spoilage_type == "Spore_Unspoil")
model_data_spore$STorAT <- sample(spore_AT_freq$ClosestAT, nrow(model_data_spore),replace=T)
model_data_spore$STorAT <- paste0("AT_", model_data_spore$STorAT)
# Assign initial contamination distributions
# ppc
N0_ppc = rnorm(n = nrow(model_data_ppc), mean = 0.38, sd = 1.11)
model_data_ppc$N0_MPN_ppc <- 10^N0_ppc*1900
model_data_ppc_filtered <- subset(model_data_ppc, N0_MPN_ppc < 1)
model_data_ppc_filtered$new_column <- runif(nrow(model_data_ppc_filtered))
model_data_ppc_filtered$N0_MPN_ppc_assigned <- ifelse(model_data_ppc_filtered$N0_MPN_ppc > model_data_ppc_filtered$new_column, 1,
ifelse(model_data_ppc_filtered$N0_MPN_ppc < model_data_ppc_filtered$new_column, 0, NA))
model_data_ppc_filtered <- model_data_ppc_filtered[, !(names(model_data_ppc_filtered) %in% c("N0_MPN_ppc", "new_column"))]
names(model_data_ppc_filtered)[names(model_data_ppc_filtered) == "N0_MPN_ppc_assigned"] <- "N0_MPN_ppc"
filtered_rows <- anti_join(model_data_ppc, model_data_ppc_filtered, by = c("lot_id", "unit_id"))
model_data_ppc <- rbind(filtered_rows,model_data_ppc_filtered)
model_data_ppc$N0 = model_data_ppc$N0_MPN_ppc/1900
model_data_ppc <- subset(model_data_ppc, select = -N0_MPN_ppc)
model_data_ppc <- as.data.frame(model_data_ppc)
# spore
N0_spore = rnorm(n = nrow(model_data_spore), mean = -0.72, sd = 0.99)
model_data_spore$N0_MPN_spore <- 10^N0_spore*1900
model_data_spore_filtered <- subset(model_data_spore, N0_MPN_spore < 1)
model_data_spore_filtered$new_column <- runif(nrow(model_data_spore_filtered))
model_data_spore_filtered$N0_MPN_spore_assigned <- ifelse(model_data_spore_filtered$N0_MPN_spore > model_data_spore_filtered$new_column, 1,
ifelse(model_data_spore_filtered$N0_MPN_spore < model_data_spore_filtered$new_column, 0, NA))
model_data_spore_filtered <- model_data_spore_filtered[, !(names(model_data_spore_filtered) %in% c("N0_MPN_spore", "new_column"))]
names(model_data_spore_filtered)[names(model_data_spore_filtered) == "N0_MPN_spore_assigned"] <- "N0_MPN_spore"
filtered_rows <- anti_join(model_data_spore, model_data_spore_filtered, by = c("lot_id", "unit_id"))
model_data_spore <- rbind(filtered_rows,model_data_spore_filtered)
model_data_spore$N0 = model_data_spore$N0_MPN_spore/1900
model_data_spore <- subset(model_data_spore, select = -N0_MPN_spore)
model_data_spore <- as.data.frame(model_data_spore)
# join data
model_data <- rbind(model_data_ppc,model_data_spore)
# Generate allele index
model_data$allele_index <- match(model_data$STorAT, growth_parameter$STorAT)
# Assign growth parameters
model_data$Mean_h0 <- growth_parameter$Mean_h0[model_data$allele_index]
model_data$StdDev_h0 <- growth_parameter$StdDev_h0[model_data$allele_index]
model_data$Mean_b <- growth_parameter$Mean_b[model_data$allele_index]
model_data$StdDev_b <- growth_parameter$StdDev_b[model_data$allele_index]
model_data$Mean_Nmax <- growth_parameter$Mean_LOG10Nmax[model_data$allele_index]
model_data$StdDev_Nmax <- growth_parameter$StdDev_LOG10Nmax[model_data$allele_index]
model_data$Topt <- growth_parameter$Topt[model_data$allele_index]
model_data <- model_data %>%
rowwise() %>%
mutate(h0 = rtruncnorm(n = 1,
a = 0,
mean = Mean_h0,
sd = StdDev_h0))
model_data$Q0 <- 1/(exp(model_data$h0)-1)
model_data <- model_data %>%
rowwise() %>%
mutate(b = rtruncnorm(n = 1,
a = 0,
mean = Mean_b,
sd = StdDev_b))
model_data <- model_data %>%
rowwise() %>%
mutate(Nmax = rnorm(n = 1,
mean = Mean_Nmax,
sd = StdDev_Nmax))
model_data$Nmax <- 10^(model_data$Nmax)
model_data <- model_data %>%
mutate(Tmin = case_when(
spoilage_type == "PPC" ~ -4.15,
spoilage_type == "Spore_Unspoil" ~ -3.62
))
model_data$mu_opt <- (model_data$b*(model_data$Topt-model_data$Tmin))^2
model_data <- as.data.frame(model_data)
# Model temperature profiles of 10000 units HTST milk
env_cond_time <- matrix(c(rep(0,10000),
model_data$t_F,
model_data$t_F+0.00001,
model_data$t_F + model_data$t_T,
model_data$t_F + model_data$t_T+0.00001,
model_data$t_F + model_data$t_T + model_data$t_S,
model_data$t_F + model_data$t_T + model_data$t_S+0.00001,
model_data$t_F + model_data$t_T + model_data$t_S + model_data$t_T2,
model_data$t_F + model_data$t_T + model_data$t_S + model_data$t_T2+0.00001,
model_data$t_F + model_data$t_T + model_data$t_S + model_data$t_T2 + model_data$t_H), ncol = 10)
env_cond_temp <- matrix(c(model_data$T_F,
model_data$T_F,
model_data$T_T,
model_data$T_T,
model_data$T_S,
model_data$T_S,
model_data$T_T2,
model_data$T_T2,
model_data$T_H,
model_data$T_H), ncol = 10)
# Run simulation
my_times <- seq(0, 21)
num_iterations <- nrow(model_data)
all_simulations <- list()
for (i in 1:num_iterations) {
my_primary <- list(mu_opt = model_data$mu_opt[i], Nmax = model_data$Nmax[i], N0 = model_data$N0[i], Q0 = model_data$Q0[i])
sec_temperature <- list(model = "reducedRatkowsky", xmin = model_data$Tmin[i], b = model_data$b[i], xopt = model_data$Topt[i])
my_secondary <- list(temperature = sec_temperature)
growth <- predict_dynamic_growth(times = my_times,
env_conditions = tibble(time = env_cond_time[i,],
temperature = env_cond_temp[i,]),
# env_conditions = tibble(time = my_times,
# temperature = 6),
my_primary,
my_secondary)
sim <- growth$simulation
all_simulations[[i]] <- sim
}
final_conc <- do.call(rbind, all_simulations)
# Generate output
model_data_1 <- model_data[rep(1:nrow(model_data), each = 22), ]
# model_data_sub <- model_data_1[,c("lot_id","unit_id","N0","spoilage_type", "STorAT")]
model_data_sub <- model_data_1[,c("lot_id","unit_id","spoilage_type", "t_F", "T_F", "t_T", "T_T",
"t_S", "T_S", "t_T2", "T_T2", "T_H")]
count_result <- final_conc[,c("time","N","logN")]
df <- cbind(model_data_sub,count_result)
summary_stats_medium <- list()
for (i in 1:21) {
filtered_data <- subset(df, time == i)
percent <- filtered_data %>%
group_by(lot_id) %>%
summarise(percent = sum(logN > 6))
percent$mean_percent <- mean(percent$percent)
percent$median_percent <- median(percent$percent)
percent$perc_25 <- quantile(percent$percent, probs = 0.25)
percent$perc_75 <- quantile(percent$percent, probs = 0.75)
percent <- percent[c("mean_percent", "median_percent", "perc_25", "perc_75")][1,]
summary_stats_medium[[i]] <- percent
}
summary_stats_medium <- do.call(rbind,summary_stats_medium)
write.csv(summary_stats_medium, "summary_stats_medium_below4.csv")
# Input data
# Growth parameters
data_ppc <- read.csv("InputData/ppc_gp.csv")
data_ppc$mumax <- 0.684 * data_ppc$mumax
data_sporeformer <- read.csv("InputData/sporeformer_gp.csv")
# AT frequency
ppc_ST_freq <- read.csv("InputData/ppc_STfreq_clean.csv")
spore_AT_freq <- read.csv("InputData/spore_ATfreq_clean.csv")
# Set seed
set.seed(1)
# Get mean and sd for PPC growth parameters h0, b, log10Nmax and Topt
data_ppc$h0 <- data_ppc$lag * data_ppc$mumax
Tmin_PPC <- -4.15
T_PPC <- 6
data_ppc$b <- sqrt(data_ppc$mumax/log(10)*24)/(T_PPC - Tmin_PPC) # mumax in log10/day
result_df <- data_ppc %>%
group_by(isolate) %>%
summarise(
Mean_h0 = mean(h0),
StdDev_h0 = sd(h0),
Mean_b = mean(b),
StdDev_b = sd(b),
Mean_LOG10Nmax = mean(LOG10Nmax),
StdDev_LOG10Nmax = sd(LOG10Nmax),
Topt = Topt
) %>%
distinct()
result_df <- as.data.frame(result_df)
result_df$STorAT <- unique(data_ppc$STorAT)
result_df$STorAT <- paste0("ST_", result_df$STorAT)
# Get mean and sd for sporeformer growth parameters h0, b, log10Nmax and Topt
data_sporeformer$h0 <- data_sporeformer$lag * data_sporeformer$mumax
Tmin_spore <- -3.62
T_spore <- 6
data_sporeformer$b <- sqrt(data_sporeformer$mumax/log(10))/(T_spore - Tmin_spore) # mumax in log10/day
result_df_1 <- data_sporeformer %>%
group_by(isolate) %>%
summarise(
Mean_h0 = h0,
StdDev_h0 = mean(result_df$StdDev_h0),
Mean_b = b,
StdDev_b = mean(result_df$StdDev_b),
Mean_LOG10Nmax = LOG10Nmax,
StdDev_LOG10Nmax = mean(result_df$StdDev_LOG10Nmax),
Topt = Topt
) %>%
distinct()
result_df_1 <- as.data.frame(result_df_1)
result_df_1$STorAT <- unique(data_sporeformer$STorAT)
result_df_1$STorAT <- paste0("AT_", result_df_1$STorAT)
# Join growth parameter data
growth_parameter <- rbind(result_df,result_df_1)
# Set up dataframe for simulation (100 lots, 100 units)
n_sim <- 100
n_unit <- 100
lot_id <- rep(seq(1, n_sim), each = n_unit)
unit_id <- rep(seq(1,n_unit), times = n_sim)
data <- data.frame(lot_id, unit_id)
# Temperature profile
# Stage 1: facility storage
## (a)  Sample the temperature distribution
data$T_F <- rep(runif(n_sim*n_unit,min=3.5,max=4.5)) #uniform distribution
## (b) Sample the storage time (in days) distribution
data$t_F <- rep(runif(n_sim*n_unit,min=1,max=2)) #uniform distribution
# Stage 2: transport from facility to retail store
## (a)  Sample the temperature distribution
data$T_T <- rep(rtri(n_sim*n_unit,min=1.7,max=10.0,mode=4.4)) #triangular distribution
## (b) Sample the transportation time (in days) distribution
data$t_T <- rep(rtri(n_sim*n_unit,min=1,max=10,mode=5))
# Stage 3: storage/display at retail store
## (a)  Sample the temperature distribution
data$T_S <- rep(rtruncnorm(n_sim*n_unit,a=-1.4,b=5.4,mean=2.3,sd=1.8)) #truncated normal distribution
## (b) Sample the storage time (in days) distribution
data$t_S <- rep(rtruncnorm(n_sim*n_unit,a=0.042,b=10.0, mean=1.821,sd=3.3)) #truncated normal distribution
## Stage 4: transportation from retail store to home
## (a)  Sample the temperature distribution
data$T_T2 <- rep(rtruncnorm(n_sim*n_unit,a=0,b=10,mean=8.5,sd=1.0)) #truncated normal distribution
## (b) Sample the transportation time (in days) distribution
data$t_T2 <- rep(rtruncnorm(n_sim*n_unit,a=0.01,b=0.24, mean=0.04,sd=0.02)) #truncated normal distribution
## Stage 5: home storage
## (a)  Sample the temperature distribution
# temps <- rep(NA, n_sim*n_unit)
# for (i in 1:(n_sim*n_unit)){
# number <- rlaplace(1,m=4.06,s=2.31)
# while (number > 15 | number < -1) {
# number <- rlaplace(1,m=4.06,s=2.31) #truncated laplace distribution
# }
# temps[i] <- number
# }
# data$T_H <- temps
temps <- rep(NA, n_sim*n_unit)
for (i in 1:(n_sim*n_unit)){
number <- rlaplace(1,m=4.06,s=2.31)
while (number > 4 | number < -1) {
number <- rlaplace(1,m=4.06,s=2.31)
}
temps[i] <- number
}
data$T_H <- temps
## (b) Define shelf-life day for all units
## Day 35
data$t_H = 35
# Generate spoilage frequency and assign spoilage types
# PPC Spoilage %
# Good Plant
data <- data %>%
group_by(lot_id) %>%
mutate (P_ppc = runif(1, 0.125, 0.313))
# Medium Plant
# data <- data %>%
# group_by(lot_id) %>%
# mutate(P_ppc = runif(1, 0.367, 0.667))
# Bad Plant
# data <- data %>%
# group_by(lot_id) %>%
# mutate (P_ppc = runif(1, 0.75, 1))
# Sanity check
# data$P_ppc = 0
# Assign spoilage type
result_list <- list()
for (i in 1:n_sim) {
data_lot <- subset(data, lot_id == as.character(i))
num_ppc <- round(unique(data_lot$P_ppc) * n_unit)
num_spore_unspoil <- n_unit - num_ppc
spoiler_types <- c(rep("PPC", num_ppc), rep("Spore_Unspoil", num_spore_unspoil))
data_lot$spoilage_type <- sample(spoiler_types, n_unit)
result_list[[i]] <- data_lot
}
data <- do.call(rbind,result_list)
# Assign AT/ST types
# ppc
model_data_ppc <- subset(data, spoilage_type == "PPC")
model_data_ppc$STorAT <- NA
for (i in 1:nrow(model_data_ppc)) {
sampled_value <- sample(ppc_ST_freq$ClosestST, 1, replace = T)
while (sampled_value == "9_23") {
sampled_value <- sample(ppc_ST_freq$ClosestST, 1, replace = T)
}
model_data_ppc$STorAT[i] <- sampled_value
}
model_data_ppc$STorAT <- paste0("ST_", model_data_ppc$STorAT)
# # spore
model_data_spore <- subset(data, spoilage_type == "Spore_Unspoil")
model_data_spore$STorAT <- sample(spore_AT_freq$ClosestAT, nrow(model_data_spore),replace=T)
model_data_spore$STorAT <- paste0("AT_", model_data_spore$STorAT)
# Assign initial contamination distributions
# ppc
N0_ppc = rnorm(n = nrow(model_data_ppc), mean = 0.38, sd = 1.11)
model_data_ppc$N0_MPN_ppc <- 10^N0_ppc*1900
model_data_ppc_filtered <- subset(model_data_ppc, N0_MPN_ppc < 1)
model_data_ppc_filtered$new_column <- runif(nrow(model_data_ppc_filtered))
model_data_ppc_filtered$N0_MPN_ppc_assigned <- ifelse(model_data_ppc_filtered$N0_MPN_ppc > model_data_ppc_filtered$new_column, 1,
ifelse(model_data_ppc_filtered$N0_MPN_ppc < model_data_ppc_filtered$new_column, 0, NA))
model_data_ppc_filtered <- model_data_ppc_filtered[, !(names(model_data_ppc_filtered) %in% c("N0_MPN_ppc", "new_column"))]
names(model_data_ppc_filtered)[names(model_data_ppc_filtered) == "N0_MPN_ppc_assigned"] <- "N0_MPN_ppc"
filtered_rows <- anti_join(model_data_ppc, model_data_ppc_filtered, by = c("lot_id", "unit_id"))
model_data_ppc <- rbind(filtered_rows,model_data_ppc_filtered)
model_data_ppc$N0 = model_data_ppc$N0_MPN_ppc/1900
model_data_ppc <- subset(model_data_ppc, select = -N0_MPN_ppc)
model_data_ppc <- as.data.frame(model_data_ppc)
# spore
N0_spore = rnorm(n = nrow(model_data_spore), mean = -0.72, sd = 0.99)
model_data_spore$N0_MPN_spore <- 10^N0_spore*1900
model_data_spore_filtered <- subset(model_data_spore, N0_MPN_spore < 1)
model_data_spore_filtered$new_column <- runif(nrow(model_data_spore_filtered))
model_data_spore_filtered$N0_MPN_spore_assigned <- ifelse(model_data_spore_filtered$N0_MPN_spore > model_data_spore_filtered$new_column, 1,
ifelse(model_data_spore_filtered$N0_MPN_spore < model_data_spore_filtered$new_column, 0, NA))
model_data_spore_filtered <- model_data_spore_filtered[, !(names(model_data_spore_filtered) %in% c("N0_MPN_spore", "new_column"))]
names(model_data_spore_filtered)[names(model_data_spore_filtered) == "N0_MPN_spore_assigned"] <- "N0_MPN_spore"
filtered_rows <- anti_join(model_data_spore, model_data_spore_filtered, by = c("lot_id", "unit_id"))
model_data_spore <- rbind(filtered_rows,model_data_spore_filtered)
model_data_spore$N0 = model_data_spore$N0_MPN_spore/1900
model_data_spore <- subset(model_data_spore, select = -N0_MPN_spore)
model_data_spore <- as.data.frame(model_data_spore)
# join data
model_data <- rbind(model_data_ppc,model_data_spore)
# Generate allele index
model_data$allele_index <- match(model_data$STorAT, growth_parameter$STorAT)
# Assign growth parameters
model_data$Mean_h0 <- growth_parameter$Mean_h0[model_data$allele_index]
model_data$StdDev_h0 <- growth_parameter$StdDev_h0[model_data$allele_index]
model_data$Mean_b <- growth_parameter$Mean_b[model_data$allele_index]
model_data$StdDev_b <- growth_parameter$StdDev_b[model_data$allele_index]
model_data$Mean_Nmax <- growth_parameter$Mean_LOG10Nmax[model_data$allele_index]
model_data$StdDev_Nmax <- growth_parameter$StdDev_LOG10Nmax[model_data$allele_index]
model_data$Topt <- growth_parameter$Topt[model_data$allele_index]
model_data <- model_data %>%
rowwise() %>%
mutate(h0 = rtruncnorm(n = 1,
a = 0,
mean = Mean_h0,
sd = StdDev_h0))
model_data$Q0 <- 1/(exp(model_data$h0)-1)
model_data <- model_data %>%
rowwise() %>%
mutate(b = rtruncnorm(n = 1,
a = 0,
mean = Mean_b,
sd = StdDev_b))
model_data <- model_data %>%
rowwise() %>%
mutate(Nmax = rnorm(n = 1,
mean = Mean_Nmax,
sd = StdDev_Nmax))
model_data$Nmax <- 10^(model_data$Nmax)
model_data <- model_data %>%
mutate(Tmin = case_when(
spoilage_type == "PPC" ~ -4.15,
spoilage_type == "Spore_Unspoil" ~ -3.62
))
model_data$mu_opt <- (model_data$b*(model_data$Topt-model_data$Tmin))^2
model_data <- as.data.frame(model_data)
# Model temperature profiles of 10000 units HTST milk
env_cond_time <- matrix(c(rep(0,10000),
model_data$t_F,
model_data$t_F+0.00001,
model_data$t_F + model_data$t_T,
model_data$t_F + model_data$t_T+0.00001,
model_data$t_F + model_data$t_T + model_data$t_S,
model_data$t_F + model_data$t_T + model_data$t_S+0.00001,
model_data$t_F + model_data$t_T + model_data$t_S + model_data$t_T2,
model_data$t_F + model_data$t_T + model_data$t_S + model_data$t_T2+0.00001,
model_data$t_F + model_data$t_T + model_data$t_S + model_data$t_T2 + model_data$t_H), ncol = 10)
env_cond_temp <- matrix(c(model_data$T_F,
model_data$T_F,
model_data$T_T,
model_data$T_T,
model_data$T_S,
model_data$T_S,
model_data$T_T2,
model_data$T_T2,
model_data$T_H,
model_data$T_H), ncol = 10)
# Run simulation
my_times <- seq(0, 35)
num_iterations <- nrow(model_data)
all_simulations <- list()
for (i in 1:num_iterations) {
my_primary <- list(mu_opt = model_data$mu_opt[i], Nmax = model_data$Nmax[i], N0 = model_data$N0[i], Q0 = model_data$Q0[i])
sec_temperature <- list(model = "reducedRatkowsky", xmin = model_data$Tmin[i], b = model_data$b[i], xopt = model_data$Topt[i])
my_secondary <- list(temperature = sec_temperature)
growth <- predict_dynamic_growth(times = my_times,
env_conditions = tibble(time = env_cond_time[i,],
temperature = env_cond_temp[i,]),
# env_conditions = tibble(time = my_times,
# temperature = 6),
my_primary,
my_secondary)
sim <- growth$simulation
all_simulations[[i]] <- sim
}
final_conc <- do.call(rbind, all_simulations)
# Generate output
model_data_1 <- model_data[rep(1:nrow(model_data), each = 36), ]
# model_data_sub <- model_data_1[,c("lot_id","unit_id","N0","spoilage_type", "STorAT")]
model_data_sub <- model_data_1[,c("lot_id","unit_id","spoilage_type", "t_F", "T_F", "t_T", "T_T",
"t_S", "T_S", "t_T2", "T_T2", "T_H")]
count_result <- final_conc[,c("time","N","logN")]
df <- cbind(model_data_sub,count_result)
summary_stats_good <- list()
for (i in 1:35) {
filtered_data <- subset(df, time == i)
percent <- filtered_data %>%
group_by(lot_id) %>%
summarise(percent = sum(logN > 6))
percent$mean_percent <- mean(percent$percent)
percent$median_percent <- median(percent$percent)
percent$perc_25 <- quantile(percent$percent, probs = 0.25)
percent$perc_75 <- quantile(percent$percent, probs = 0.75)
percent <- percent[c("mean_percent", "median_percent", "perc_25", "perc_75")][1,]
summary_stats_good[[i]] <- percent
}
summary_stats_good <- do.call(rbind,summary_stats_good)
write.csv(summary_stats_good, "summary_stats_good_below4.csv")

## (a)  Sample the temperature distribution
data$T_F <- rep(runif(n_sim*n_unit,min=3.5,max=4.5)) #uniform distribution
## (b) Sample the storage time (in days) distribution
data$t_F <- rep(runif(n_sim*n_unit,min=1,max=2)) #uniform distribution
# Stage 2: transport from facility to retail store
## (a)  Sample the temperature distribution
data$T_T <- rep(rtri(n_sim*n_unit,min=1.7,max=10.0,mode=4.4)) #triangular distribution
# scenario 5) and 6) transportation temperature between facility and retail <= 7C or 5C
# temps <- rep(NA, n_sim*n_unit)
# for (i in 1:(n_sim*n_unit)){
# number <- rtri(1,min=1.7,max=10.0,mode=4.4)
# while (number > 5) {
# number <- rlaplace(1,min=1.7,max=10.0,mode=4.4)
# }
# temps[i] <- number
# }
# data$T_H <- temps
## (b) Sample the transportation time (in days) distribution
data$t_T <- rep(rtri(n_sim*n_unit,min=1,max=10,mode=5))
# Stage 3: storage/display at retail store
## (a)  Sample the temperature distribution
data$T_S <- rep(rtruncnorm(n_sim*n_unit,a=-1.4,b=5.4,mean=2.3,sd=1.8)) #truncated normal distribution
## (b) Sample the storage time (in days) distribution
data$t_S <- rep(rtruncnorm(n_sim*n_unit,a=0.042,b=10.0, mean=1.821,sd=3.3)) #truncated normal distribution
## Stage 4: transportation from retail store to home
## (a)  Sample the temperature distribution
data$T_T2 <- rep(rtruncnorm(n_sim*n_unit,a=0,b=10,mean=8.5,sd=1.0)) #truncated normal distribution
## (b) Sample the transportation time (in days) distribution
data$t_T2 <- rep(rtruncnorm(n_sim*n_unit,a=0.01,b=0.24, mean=0.04,sd=0.02)) #truncated normal distribution
## Stage 5: home storage
## (a)  Sample the temperature distribution
temps <- rep(NA, n_sim*n_unit)
for (i in 1:(n_sim*n_unit)){
number <- rlaplace(1,m=4.06,s=2.31)
while (number > 15 | number < -1) {
number <- rlaplace(1,m=4.06,s=2.31) #truncated laplace distribution
}
temps[i] <- number
}
data$T_H <- temps
# scenario 4) consumer home temperature <= 4C
# temps <- rep(NA, n_sim*n_unit)
# for (i in 1:(n_sim*n_unit)){
# number <- rlaplace(1,m=4.06,s=2.31)
# while (number > 4 | number < -1) {
# number <- rlaplace(1,m=4.06,s=2.31)
# }
# temps[i] <- number
# }
# data$T_H <- temps
## (b) Define shelf-life day for all units
## Day 35
## (b) Define shelf-life day for all units
## Day 35
data$t_H = 31
data <- data %>%
group_by(lot_id) %>%
mutate (P_ppc = runif(1, 0.125, 0.294))
# Medium Plant
# data <- data %>%
# group_by(lot_id) %>%
# mutate(P_ppc = runif(1, 0.4, 0.625))
# Bad Plant
# data <- data %>%
# group_by(lot_id) %>%
# mutate (P_ppc = runif(1, 0.778, 1))
# Sanity check
# data$P_ppc = 0
# Assign spoilage type
result_list <- list()
for (i in 1:n_sim) {
data_lot <- subset(data, lot_id == as.character(i))
num_ppc <- round(unique(data_lot$P_ppc) * n_unit)
num_spore_unspoil <- n_unit - num_ppc
spoiler_types <- c(rep("PPC", num_ppc), rep("Spore_Unspoil", num_spore_unspoil))
data_lot$spoilage_type <- sample(spoiler_types, n_unit)
result_list[[i]] <- data_lot
}
data <- do.call(rbind,result_list)
# Assign AT/ST types
# ppc
model_data_ppc <- subset(data, spoilage_type == "PPC")
model_data_ppc$STorAT <- NA
for (i in 1:nrow(model_data_ppc)) {
sampled_value <- sample(ppc_ST_freq$ClosestST, 1, replace = T)
while (sampled_value == "9_23") {
sampled_value <- sample(ppc_ST_freq$ClosestST, 1, replace = T)
}
model_data_ppc$STorAT[i] <- sampled_value
}
model_data_ppc$STorAT <- paste0("ST_", model_data_ppc$STorAT)
# # spore
model_data_spore <- subset(data, spoilage_type == "Spore_Unspoil")
model_data_spore$STorAT <- sample(spore_AT_freq$ClosestAT, nrow(model_data_spore),replace=T)
model_data_spore$STorAT <- paste0("AT_", model_data_spore$STorAT)
# Assign initial contamination distributions
# ppc
ppc_initial_mean <- sample(ppc_mean_distr, 100)
ppc_initial_sd <- sample(ppc_sd_distr, 100)
df1 <- data.frame(
lot_id = unique(model_data_ppc$lot_id),
initial_mean = rep(ppc_initial_mean, length.out = length(unique(model_data_ppc$lot_id))),
initial_sd = rep(ppc_initial_sd, length.out = length(unique(model_data_ppc$lot_id)))
)
model_data_ppc <- merge(model_data_ppc, df1, by = "lot_id")
model_data_ppc <- model_data_ppc %>%
rowwise() %>%
mutate(N0 = rnorm(n = 1, mean = initial_mean, sd = initial_sd))
# scenario 3) reduce initial ppc by 1-3 log
# log_reduction_ppc = rep(runif(n_sim,min=1,max=3))
# log_reduction_ppc = data.frame(lot_id = c(1:100), log_reduction = log_reduction_ppc)
# model_data_ppc <- model_data_ppc %>%
# left_join(log_reduction_ppc, by = "lot_id")
# model_data_ppc$N0 = model_data_ppc$N0 - model_data_ppc$log_reduction
# model_data_ppc <- subset(model_data_ppc, select = -log_reduction)
# filter partial cells
model_data_ppc$N0_MPN_ppc <- 10^model_data_ppc$N0*1900
model_data_ppc_filtered <- subset(model_data_ppc, N0_MPN_ppc < 1)
model_data_ppc_filtered$new_column <- runif(nrow(model_data_ppc_filtered))
model_data_ppc_filtered$N0_MPN_ppc_assigned <- ifelse(model_data_ppc_filtered$N0_MPN_ppc > model_data_ppc_filtered$new_column, 1,
ifelse(model_data_ppc_filtered$N0_MPN_ppc < model_data_ppc_filtered$new_column, 0, NA))
model_data_ppc_filtered <- model_data_ppc_filtered[, !(names(model_data_ppc_filtered) %in% c("N0_MPN_ppc", "new_column"))]
names(model_data_ppc_filtered)[names(model_data_ppc_filtered) == "N0_MPN_ppc_assigned"] <- "N0_MPN_ppc"
filtered_rows <- anti_join(model_data_ppc, model_data_ppc_filtered, by = c("lot_id", "unit_id"))
model_data_ppc <- rbind(filtered_rows,model_data_ppc_filtered)
model_data_ppc$N0 = model_data_ppc$N0_MPN_ppc/1900
model_data_ppc <- subset(model_data_ppc, select = -N0_MPN_ppc)
model_data_ppc <- as.data.frame(model_data_ppc)
# spore
spore_initial_mean <- sample(spore_mean_distr, 100)
spore_initial_sd <- sample(spore_sd_distr, 100)
df2 <- data.frame(
lot_id = unique(model_data_spore$lot_id),
initial_mean = rep(spore_initial_mean, length.out = length(unique(model_data_spore$lot_id))),
initial_sd = rep(spore_initial_sd, length.out = length(unique(model_data_spore$lot_id)))
)
model_data_spore <- merge(model_data_spore, df2, by = "lot_id")
model_data_spore <- model_data_spore %>%
rowwise() %>%
mutate(N0 = rnorm(n = 1, mean = initial_mean, sd = initial_sd))
# scenario 1) and 2) reduce initial spore by 0.6-3.1 log or 1.23-1.64 log
# log_reduction_spore = rep(runif(n_sim,min=1.23,max=1.64))
# log_reduction_spore = data.frame(lot_id = c(1:100), log_reduction = log_reduction_spore)
# model_data_spore <- model_data_spore %>%
# left_join(log_reduction_spore, by = "lot_id")
# model_data_spore$N0 = model_data_spore$N0 - model_data_spore$log_reduction
# model_data_spore <- subset(model_data_spore, select = -log_reduction)
# filter partial spores
model_data_spore$N0_MPN_spore <- 10^model_data_spore$N0*1900
model_data_spore_filtered <- subset(model_data_spore, N0_MPN_spore < 1)
model_data_spore_filtered$new_column <- runif(nrow(model_data_spore_filtered))
model_data_spore_filtered$N0_MPN_spore_assigned <- ifelse(model_data_spore_filtered$N0_MPN_spore > model_data_spore_filtered$new_column, 1,
ifelse(model_data_spore_filtered$N0_MPN_spore < model_data_spore_filtered$new_column, 0, NA))
model_data_spore_filtered <- model_data_spore_filtered[, !(names(model_data_spore_filtered) %in% c("N0_MPN_spore", "new_column"))]
names(model_data_spore_filtered)[names(model_data_spore_filtered) == "N0_MPN_spore_assigned"] <- "N0_MPN_spore"
filtered_rows <- anti_join(model_data_spore, model_data_spore_filtered, by = c("lot_id", "unit_id"))
model_data_spore <- rbind(filtered_rows,model_data_spore_filtered)
model_data_spore$N0 = model_data_spore$N0_MPN_spore/1900
model_data_spore <- subset(model_data_spore, select = -N0_MPN_spore)
model_data_spore <- as.data.frame(model_data_spore)
# join data
model_data <- rbind(model_data_ppc,model_data_spore)
# Generate allele index
model_data$allele_index <- match(model_data$STorAT, growth_parameter$STorAT)
# Assign growth parameters
model_data$Mean_h0 <- growth_parameter$Mean_h0[model_data$allele_index]
model_data$StdDev_h0 <- growth_parameter$StdDev_h0[model_data$allele_index]
model_data$Mean_b <- growth_parameter$Mean_b[model_data$allele_index]
model_data$StdDev_b <- growth_parameter$StdDev_b[model_data$allele_index]
model_data$Mean_Nmax <- growth_parameter$Mean_LOG10Nmax[model_data$allele_index]
model_data$StdDev_Nmax <- growth_parameter$StdDev_LOG10Nmax[model_data$allele_index]
model_data$Topt <- growth_parameter$Topt[model_data$allele_index]
model_data <- model_data %>%
rowwise() %>%
mutate(h0 = rtruncnorm(n = 1,
a = 0,
mean = Mean_h0,
sd = StdDev_h0))
model_data$Q0 <- 1/(exp(model_data$h0)-1)
model_data <- model_data %>%
rowwise() %>%
mutate(b = rtruncnorm(n = 1,
a = 0,
mean = Mean_b,
sd = StdDev_b))
model_data <- model_data %>%
rowwise() %>%
mutate(Nmax = rnorm(n = 1,
mean = Mean_Nmax,
sd = StdDev_Nmax))
model_data$Nmax <- 10^(model_data$Nmax)
model_data <- model_data %>%
mutate(Tmin = case_when(
spoilage_type == "PPC" ~ -4.15,
spoilage_type == "Spore_Unspoil" ~ -3.62
))
model_data$mu_opt <- (model_data$b*(model_data$Topt-model_data$Tmin))^2
model_data <- as.data.frame(model_data)
# Model temperature profiles of 10000 units HTST milk
env_cond_time <- matrix(c(rep(0,10000),
model_data$t_F,
model_data$t_F+0.00001,
model_data$t_F + model_data$t_T,
model_data$t_F + model_data$t_T+0.00001,
model_data$t_F + model_data$t_T + model_data$t_S,
model_data$t_F + model_data$t_T + model_data$t_S+0.00001,
model_data$t_F + model_data$t_T + model_data$t_S + model_data$t_T2,
model_data$t_F + model_data$t_T + model_data$t_S + model_data$t_T2+0.00001,
model_data$t_F + model_data$t_T + model_data$t_S + model_data$t_T2 + model_data$t_H), ncol = 10)
env_cond_temp <- matrix(c(model_data$T_F,
model_data$T_F,
model_data$T_T,
model_data$T_T,
model_data$T_S,
model_data$T_S,
model_data$T_T2,
model_data$T_T2,
model_data$T_H,
model_data$T_H), ncol = 10)
my_times <- seq(0, 31)
num_iterations <- nrow(model_data)
all_simulations <- list()
for (i in 1:num_iterations) {
my_primary <- list(mu_opt = model_data$mu_opt[i], Nmax = model_data$Nmax[i], N0 = model_data$N0[i], Q0 = model_data$Q0[i])
sec_temperature <- list(model = "reducedRatkowsky", xmin = model_data$Tmin[i], b = model_data$b[i], xopt = model_data$Topt[i])
my_secondary <- list(temperature = sec_temperature)
growth <- predict_dynamic_growth(times = my_times,
env_conditions = tibble(time = env_cond_time[i,],
temperature = env_cond_temp[i,]),
# env_conditions = tibble(time = my_times,
# temperature = 6),
my_primary,
my_secondary)
sim <- growth$simulation
all_simulations[[i]] <- sim
}
final_conc <- do.call(rbind, all_simulations)
# Generate output
model_data_1 <- model_data[rep(1:nrow(model_data), each = 32), ]
model_data_sub <- model_data_1[,c("lot_id","unit_id","N0","spoilage_type", "STorAT")]
# model_data_sub <- model_data_1[,c("lot_id","unit_id","spoilage_type", "t_F", "T_F", "t_T", "T_T",
# "t_S", "T_S", "t_T2", "T_T2", "T_H")]
# model_data_sub <- model_data_sub <- model_data_1[,c("t_F", "T_F", "t_T", "T_T", "t_S", "T_S",
# "t_T2", "T_T2", "T_H", "P_ppc", "N0")]
count_result <- final_conc[,c("time","N","logN")]
df <- cbind(model_data_sub,count_result)
df$logN[df$logN == -Inf] <- -2
df_Good = df
summary_stats_good <- list()
for (i in 1:31) {
filtered_data <- subset(df_Good, time == i)
percent <- filtered_data %>%
group_by(lot_id) %>%
summarise(percent = sum(logN > 6))
percent$mean_percent <- mean(percent$percent)
percent$median_percent <- median(percent$percent)
percent$perc_5 <- quantile(percent$percent, probs = 0.05)
percent$perc_95 <- quantile(percent$percent, probs = 0.95)
percent <- percent[c("mean_percent", "median_percent", "perc_5","perc_95")][1,]
summary_stats_good[[i]] <- percent
}
summary_stats_good <- do.call(rbind,summary_stats_good)
View(summary_stats_good)
summary_stats_medium <- list()
for (i in 1:28) {
filtered_data <- subset(df_Medium, time == i)
percent <- filtered_data %>%
group_by(lot_id) %>%
summarise(percent = sum(logN > 6))
percent$mean_percent <- mean(percent$percent)
percent$median_percent <- median(percent$percent)
percent$perc_5 <- quantile(percent$percent, probs = 0.05)
percent$perc_95 <- quantile(percent$percent, probs = 0.95)
percent <- percent[c("mean_percent", "median_percent", "perc_5","perc_95")][1,]
summary_stats_medium[[i]] <- percent
}
summary_stats_medium <- do.call(rbind,summary_stats_medium)
View(summary_stats_medium)
summary_stats_bad <- list()
for (i in 1:28) {
filtered_data <- subset(df_Bad, time == i)
percent <- filtered_data %>%
group_by(lot_id) %>%
summarise(percent = sum(logN > 6))
percent$mean_percent <- mean(percent$percent)
percent$median_percent <- median(percent$percent)
percent$perc_5 <- quantile(percent$percent, probs = 0.05)
percent$perc_95 <- quantile(percent$percent, probs = 0.95)
percent <- percent[c("mean_percent", "median_percent", "perc_5","perc_95")][1,]
summary_stats_bad[[i]] <- percent
}
summary_stats_bad <- do.call(rbind,summary_stats_bad)
View(summary_stats_bad)
# Plot percent > 6 log over shelf-life
par(mfrow = c(1, 3))
shelflife_days = c(1:31)
plot(summary_stats_good$median_percent ~ shelflife_days, type = "l",
col = "black", xlab = "Shelf-life days", ylab = "Percent milk containers over 6 log",
ylim = c(0,85), main = "Good Plant")
lines(summary_stats_bad$perc_5 ~ shelflife_days, type = "l", col = "black", lty = 2)
lines(summary_stats_good$perc_5 ~ shelflife_days, type = "l", col = "black", lty = 2)
lines(summary_stats_good$perc_95 ~ shelflife_days, type = "l", col = "black", lty = 2)
abline(h = 25, col = "red")
shelflife_days = c(1:28)
# Plot percent > 6 log over shelf-life
par(mfrow = c(1, 3))
shelflife_days = c(1:31)
plot(summary_stats_good$median_percent ~ shelflife_days, type = "l",
col = "black", xlab = "Shelf-life days", ylab = "Percent milk containers over 6 log",
ylim = c(0,85), main = "Long Shelf-life Milk Plant")
lines(summary_stats_good$perc_5 ~ shelflife_days, type = "l", col = "black", lty = 2)
lines(summary_stats_good$perc_95 ~ shelflife_days, type = "l", col = "black", lty = 2)
abline(h = 25, col = "red")
shelflife_days = c(1:28)
plot(summary_stats_medium$median_percent ~ shelflife_days, type = "l",
col = "black", xlab = "Shelf-life days", ylab = "Percent milk containers over 6 log",
ylim = c(0,85), main = "Medium Shelf-life Milk Plant")
lines(summary_stats_medium$perc_5 ~ shelflife_days, type = "l", col = "black", lty = 2)
lines(summary_stats_medium$perc_95 ~ shelflife_days, type = "l", col = "black", lty = 2)
abline(h = 25, col = "red")
plot(summary_stats_bad$median_percent ~ shelflife_days, type = "l",
col = "black", xlab = "Shelf-life days", ylab = "Percent milk containers over 6 log",
ylim = c(0,85), main = "Short Shelf-life Milk Plant")
lines(summary_stats_bad$perc_5 ~ shelflife_days, type = "l", col = "black", lty = 2)
lines(summary_stats_bad$perc_95 ~ shelflife_days, type = "l", col = "black", lty = 2)
abline(h = 25, col = "red")
View(summary_stats_good)
View(summary_stats_medium)
View(summary_stats_bad)
df_Good
View(df_Good)
View(subset(df_Good, logN > 6))
nrow(subset(df_Good, logN > 6 & spoiler_types == "PPC"))
nrow(subset(df_Good,time = 25 & logN >6 & spoiler_types == "PPC"))
df_Good_d25 = subset(df_Good, time = 25)
View(df_Good_d25)
df_Good_d25 = subset(df_Good, time == 25)
nrow(subset(df_Good_d25,logN >6 & spoiler_types == "PPC"))
nrow(subset(df_Good_d25,logN >6))
perc_PPC_spoil_Good_d25 = 557/2527
df_Medium_d12 = subset(df_Medium, time == 12)
nrow(subset(df_Medium_d12,logN >6 & spoiler_types == "PPC"))
nrow(subset(df_Medium_d12,logN >6))
563/2485
View(df_Medium_d12)
View(df_Good_d25)
View(subset(df_Good_d25,logN >6 & spoiler_type == "PPC"))
View(df_Good_d25)
View(subset(df_Good_d25,logN >6 & spoilage_type == "PPC"))
nrow((subset(df_Good_d25,logN >6 & spoilage_type == "PPC")))
nrow(subset(df_Good_d25,logN >6))
perc_PPC_spoil_Good_d25 = 1825/2527
nrow((subset(df_Medium_d12,logN >6 & spoilage_type == "PPC")))
nrow((subset(df_Medium_d12,logN >6)))
perc_PPC_spoil_Medium_d12 = 2462/2485
df_Bad_d8 = subset(df_Bad, time == 8)
nrow((subset(df_Bad_d8,logN >6 & spoilage_type == "PPC")))
nrow((subset(df_Bad_d8,logN >6)))
2728/2730
save.image("C:/Users/sujun/Documents/GitHub/Combined-Spoilage-Model-App/Base model.RData")
rm(list=ls())
load("~/GitHub/Combined-Spoilage-Model-App/Sensitivity analysis.RData")
plot_Good = ggplot(SA_result_Good_Plant_D21_filtered, aes(x = est, y = reorder(var, abs_prcc))) +
geom_bar(stat = "identity", fill = "grey") +
labs(x = "Partial Rank Correlation Coefficient", y = "Parameters", title = "Long Shelf-life Milk Plant") +
theme_minimal() +
xlim(-0.1,0.6)
plot_Good
plot_Medium = ggplot(SA_result_Medium_Plant_D21_filtered, aes(x = est, y = reorder(var, abs_prcc))) +
geom_bar(stat = "identity", fill = "grey") +
labs(x = "Partial Rank Correlation Coefficient", y = "Parameters", title = "Medium Shelf-life Milk Plant") +
theme_minimal() +
xlim(-0.1,0.6)
plot_Bad = ggplot(SA_result_Bad_Plant_D21_filtered, aes(x = est, y = reorder(var, abs_prcc))) +
geom_bar(stat = "identity", fill = "grey") +
labs(x = "Partial Rank Correlation Coefficient", y = "Parameters", title = "Short Shelf-life Milk Plant") +
theme_minimal() +
xlim(-0.1,0.6)
grid.arrange(plot_Good, plot_Medium, plot_Bad, ncol = 1)
rm(list=ls())
load("~/GitHub/Combined-Spoilage-Model-App/Base model.RData")
# Plot percent > 6 log over shelf-life
par(mfrow = c(1, 3))
shelflife_days = c(1:31)
plot(summary_stats_good$median_percent ~ shelflife_days, type = "l",
col = "black", xlab = "Shelf-life days", ylab = "Percent milk containers over 6 log",
ylim = c(0,85), main = "Long Shelf-life Milk Plant")
lines(summary_stats_good$perc_5 ~ shelflife_days, type = "l", col = "black", lty = 4)
lines(summary_stats_good$perc_95 ~ shelflife_days, type = "l", col = "black", lty = 2)
legend("topright", legend = c("Median", "5th Percentile", "95th Percentile"),
col = "black", lty = c(1, 4, 2), bty = "n")
abline(h = 25, col = "red")
shelflife_days = c(1:28)
shelflife_days = c(1:28)
plot(summary_stats_medium$median_percent ~ shelflife_days, type = "l",
col = "black", xlab = "Shelf-life days", ylab = "Percent milk containers over 6 log",
ylim = c(0,85), main = "Medium Shelf-life Milk Plant")
lines(summary_stats_medium$perc_5 ~ shelflife_days, type = "l", col = "black", lty = 4)
lines(summary_stats_medium$perc_95 ~ shelflife_days, type = "l", col = "black", lty = 2)
legend("topright", legend = c("Median", "5th Percentile", "95th Percentile"),
col = "black", lty = c(1, 4, 2), bty = "n")
abline(h = 25, col = "red")
plot(summary_stats_bad$median_percent ~ shelflife_days, type = "l",
col = "black", xlab = "Shelf-life days", ylab = "Percent milk containers over 6 log",
ylim = c(0,85), main = "Short Shelf-life Milk Plant")
lines(summary_stats_bad$perc_5 ~ shelflife_days, type = "l", col = "black", lty = 4)
lines(summary_stats_bad$perc_95 ~ shelflife_days, type = "l", col = "black", lty = 2)
legend("topright", legend = c("Median", "5th Percentile", "95th Percentile"),
col = "black", lty = c(1, 4, 2), bty = "n")
# Plot percent > 6 log over shelf-life
par(mfrow = c(1, 3))
shelflife_days = c(1:31)
plot(summary_stats_good$median_percent ~ shelflife_days, type = "l",
col = "black", xlab = "Shelf-life days", ylab = "Percent milk containers over 6 log",
ylim = c(0,85), main = "Long Shelf-life Milk Plant")
lines(summary_stats_good$perc_5 ~ shelflife_days, type = "l", col = "black", lty = 4)
lines(summary_stats_good$perc_95 ~ shelflife_days, type = "l", col = "black", lty = 2)
legend(x = 0.1, y = 85, legend = c("Median Percent", "5th Percentile", "95th Percentile"),
col = "black", lty = c(1, 4, 2), bty = "n")
abline(h = 25, col = "red")
shelflife_days = c(1:28)
plot(summary_stats_medium$median_percent ~ shelflife_days, type = "l",
col = "black", xlab = "Shelf-life days", ylab = "Percent milk containers over 6 log",
ylim = c(0,85), main = "Medium Shelf-life Milk Plant")
lines(summary_stats_medium$perc_5 ~ shelflife_days, type = "l", col = "black", lty = 4)
lines(summary_stats_medium$perc_95 ~ shelflife_days, type = "l", col = "black", lty = 2)
legend(x = 0.1, y = 85, legend = c("Median Percent", "5th Percentile", "95th Percentile"),
col = "black", lty = c(1, 4, 2), bty = "n")
abline(h = 25, col = "red")
plot(summary_stats_bad$median_percent ~ shelflife_days, type = "l",
col = "black", xlab = "Shelf-life days", ylab = "Percent milk containers over 6 log",
ylim = c(0,85), main = "Short Shelf-life Milk Plant")
lines(summary_stats_bad$perc_5 ~ shelflife_days, type = "l", col = "black", lty = 4)
lines(summary_stats_bad$perc_95 ~ shelflife_days, type = "l", col = "black", lty = 2)
legend(x = 0.1, y = 85, legend = c("Median Percent", "5th Percentile", "95th Percentile"),
col = "black", lty = c(1, 4, 2), bty = "n")
abline(h = 25, col = "red")
plot(summary_stats_bad$median_percent ~ shelflife_days, type = "l",
col = "black", xlab = "Shelf-life days", ylab = "Percent milk containers over 6 log",
ylim = c(0,85), main = "Short Shelf-life Milk Plant")
lines(summary_stats_bad$perc_5 ~ shelflife_days, type = "l", col = "black", lty = 4)
lines(summary_stats_bad$perc_95 ~ shelflife_days, type = "l", col = "black", lty = 2)
legend(x = 0.1, y = 90, legend = c("Median Percent", "5th Percentile", "95th Percentile"),
col = "black", lty = c(1, 4, 2), bty = "n")
# Plot percent > 6 log over shelf-life
par(mfrow = c(1, 3))
shelflife_days = c(1:31)
plot(summary_stats_good$median_percent ~ shelflife_days, type = "l",
col = "black", xlab = "Shelf-life days", ylab = "Percent milk containers over 6 log",
ylim = c(0,85), main = "Long Shelf-life Milk Plant")
lines(summary_stats_good$perc_5 ~ shelflife_days, type = "l", col = "black", lty = 4)
lines(summary_stats_good$perc_95 ~ shelflife_days, type = "l", col = "black", lty = 2)
legend(x = 0.1, y = 90, legend = c("Median Percent", "5th Percentile", "95th Percentile"),
col = "black", lty = c(1, 4, 2), bty = "n")
abline(h = 25, col = "red")
shelflife_days = c(1:28)
plot(summary_stats_medium$median_percent ~ shelflife_days, type = "l",
col = "black", xlab = "Shelf-life days", ylab = "Percent milk containers over 6 log",
ylim = c(0,85), main = "Long Shelf-life Milk Plant")
# Plot percent > 6 log over shelf-life
par(mfrow = c(1, 3))
shelflife_days = c(1:31)
plot(summary_stats_good$median_percent ~ shelflife_days, type = "l",
col = "black", xlab = "Shelf-life days", ylab = "Percent milk containers over 6 log",
ylim = c(0,85), main = "Long Shelf-life Milk Plant")
lines(summary_stats_good$perc_5 ~ shelflife_days, type = "l", col = "black", lty = 4)
lines(summary_stats_good$perc_95 ~ shelflife_days, type = "l", col = "black", lty = 2)
legend(x = 0.1, y = 90, legend = c("Median Percent", "5th Percentile", "95th Percentile"),
col = "black", lty = c(1, 4, 2), bty = "n")
abline(h = 25, col = "red")
shelflife_days = c(1:28)
plot(summary_stats_medium$median_percent ~ shelflife_days, type = "l",
col = "black", xlab = "Shelf-life days", ylab = "Percent milk containers over 6 log",
ylim = c(0,85), main = "Medium Shelf-life Milk Plant")
lines(summary_stats_medium$perc_5 ~ shelflife_days, type = "l", col = "black", lty = 4)
lines(summary_stats_medium$perc_95 ~ shelflife_days, type = "l", col = "black", lty = 2)
# Plot percent > 6 log over shelf-life
par(mfrow = c(1, 3))
shelflife_days = c(1:31)
plot(summary_stats_good$median_percent ~ shelflife_days, type = "l",
col = "black", xlab = "Shelf-life days", ylab = "Percent milk containers over 6 log",
ylim = c(0,85), main = "Long Shelf-life Milk Plant")
lines(summary_stats_good$perc_5 ~ shelflife_days, type = "l", col = "black", lty = 4)
lines(summary_stats_good$perc_95 ~ shelflife_days, type = "l", col = "black", lty = 2)
legend(x = 0.1, y = 90, legend = c("Median", "5th Percentile", "95th Percentile"),
col = "black", lty = c(1, 4, 2), bty = "n")
abline(h = 25, col = "red")
shelflife_days = c(1:28)
plot(summary_stats_medium$median_percent ~ shelflife_days, type = "l",
col = "black", xlab = "Shelf-life days", ylab = "Percent milk containers over 6 log",
ylim = c(0,85), main = "Medium Shelf-life Milk Plant")
lines(summary_stats_medium$perc_5 ~ shelflife_days, type = "l", col = "black", lty = 4)
lines(summary_stats_medium$perc_95 ~ shelflife_days, type = "l", col = "black", lty = 2)
legend(x = 0.1, y = 90, legend = c("Median", "5th Percentile", "95th Percentile"),
col = "black", lty = c(1, 4, 2), bty = "n")
abline(h = 25, col = "red")
plot(summary_stats_$mediabadn_percent ~ shelflife_days, type = "l",
col = "black", xlab = "Shelf-life days", ylab = "Percent milk containers over 6 log",
ylim = c(0,85), main = "Short Shelf-life Milk Plant")
plot(summary_stats_bad$median_percent ~ shelflife_days, type = "l",
col = "black", xlab = "Shelf-life days", ylab = "Percent milk containers over 6 log",
ylim = c(0,85), main = "Short Shelf-life Milk Plant")
lines(summary_stats_bad$perc_5 ~ shelflife_days, type = "l", col = "black", lty = 4)
lines(summary_stats_bad$perc_95 ~ shelflife_days, type = "l", col = "black", lty = 2)
legend(x = 0.1, y = 90, legend = c("Median", "5th Percentile", "95th Percentile"),
col = "black", lty = c(1, 4, 2), bty = "n")
abline(h = 25, col = "red")
View(percentiles_Good)
rm(list=ls())
load("~/GitHub/Combined-Spoilage-Model-App/What-if scenarios.RData")
View(summary_stats_bad_sc1)
View(summary_stats_bad_sc1)

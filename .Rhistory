Mean_b = mean(b),
StdDev_b = sd(b),
Mean_LOG10Nmax = mean(LOG10Nmax),
StdDev_LOG10Nmax = sd(LOG10Nmax),
Topt = Topt
) %>%
distinct()
result_df <- as.data.frame(result_df)
result_df$STorAT <- unique(data_ppc$STorAT)
result_df$STorAT <- paste0("ST_", result_df$STorAT)
result_df$STorAT <- paste0("ST_", result_df$STorAT)
result_df
# Get mean and sd for sporeformer growth parameters h0, b, log10Nmax and Topt
data_sporeformer$h0 <- data_sporeformer$lag * data_sporeformer$mumax
Tmin_spore <- -3.62
T_spore <- 6
data_sporeformer$b <- sqrt(data_sporeformer$mumax/log(10))/(T_spore - Tmin_spore) # mumax in log10/day
result_df_1 <- data_sporeformer %>%
group_by(isolate) %>%
summarise(
Mean_h0 = h0,
StdDev_h0 = mean(result_df$StdDev_h0),
Mean_b = b,
StdDev_b = mean(result_df$StdDev_b),
Mean_LOG10Nmax = LOG10Nmax,
StdDev_LOG10Nmax = mean(result_df$StdDev_LOG10Nmax),
Topt = Topt
) %>%
distinct()
result_df_1 <- as.data.frame(result_df_1)
result_df_1$STorAT <- unique(data_sporeformer$STorAT)
result_df_1$STorAT <- paste0("AT_", result_df_1$STorAT)
# Join growth parameter data
growth_parameter <- rbind(result_df,result_df_1)
# Set up dataframe for simulation (100 lots, 100 units)
n_sim <- 100
n_unit <- 100
lot_id <- rep(seq(1, n_sim), each = n_unit)
unit_id <- rep(seq(1,n_unit), times = n_sim)
data <- data.frame(lot_id, unit_id)
# Temperature profile
# Stage 1: facility storage
## (a)  Sample the temperature distribution
data$T_F <- rep(runif(n_sim*n_unit,min=3.5,max=4.5)) #uniform distribution
## (b) Sample the storage time (in days) distribution
data$t_F <- rep(runif(n_sim*n_unit,min=1,max=2)) #uniform distribution
# Stage 2: transport from facility to retail store
## (a)  Sample the temperature distribution
data$T_T <- rep(rtri(n_sim*n_unit,min=1.7,max=10.0,mode=4.4)) #triangular distribution
## (b) Sample the transportation time (in days) distribution
data$t_T <- rep(rtri(n_sim*n_unit,min=1,max=10,mode=5))
# Stage 3: storage/display at retail store
## (a)  Sample the temperature distribution
data$T_S <- rep(rtruncnorm(n_sim*n_unit,a=-1.4,b=5.4,mean=2.3,sd=1.8)) #truncated normal distribution
## (b) Sample the storage time (in days) distribution
data$t_S <- rep(rtruncnorm(n_sim*n_unit,a=0.042,b=10.0, mean=1.821,sd=3.3)) #truncated normal distribution
## Stage 4: transportation from retail store to home
## (a)  Sample the temperature distribution
data$T_T2 <- rep(rtruncnorm(n_sim*n_unit,a=0,b=10,mean=8.5,sd=1.0)) #truncated normal distribution
## (b) Sample the transportation time (in days) distribution
data$t_T2 <- rep(rtruncnorm(n_sim*n_unit,a=0.01,b=0.24, mean=0.04,sd=0.02)) #truncated normal distribution
## Stage 5: home storage
## (a)  Sample the temperature distribution
temps <- rep(NA, n_sim*n_unit)
for (i in 1:(n_sim*n_unit)){
number <- rlaplace(1,m=4.06,s=2.31)
while (number > 15 | number < -1) {
number <- rlaplace(1,m=4.06,s=2.31) #truncated laplace distribution
}
temps[i] <- number
}
data$T_H <- temps
## (b) Define shelf-life day for all units
## Day 35
data$t_H = 35
# Bad Plant
data <- data %>%
group_by(lot_id) %>%
mutate (P_ppc = runif(1, 0.75, 1))
# Assign spoilage type
result_list <- list()
for (i in 1:n_sim) {
data_lot <- subset(data, lot_id == as.character(i))
num_ppc <- round(unique(data_lot$P_ppc) * n_unit)
num_spore_unspoil <- n_unit - num_ppc
spoiler_types <- c(rep("PPC", num_ppc), rep("Spore_Unspoil", num_spore_unspoil))
data_lot$spoilage_type <- sample(spoiler_types, n_unit)
result_list[[i]] <- data_lot
}
data <- do.call(rbind,result_list)
# Assign AT/ST types
# ppc
model_data_ppc <- subset(data, spoilage_type == "PPC")
model_data_ppc$STorAT <- NA
for (i in 1:nrow(model_data_ppc)) {
sampled_value <- sample(ppc_ST_freq$ClosestST, 1, replace = T)
while (sampled_value == "9_23") {
sampled_value <- sample(ppc_ST_freq$ClosestST, 1, replace = T)
}
model_data_ppc$STorAT[i] <- sampled_value
}
model_data_ppc$STorAT <- paste0("ST_", model_data_ppc$STorAT)
# # spore
model_data_spore <- subset(data, spoilage_type == "Spore_Unspoil")
# model_data_spore$STorAT <- rep(179, nrow(model_data_spore))
model_data_spore$STorAT <- sample(spore_AT_freq$ClosestAT, nrow(model_data_spore),replace=T)
model_data_spore$STorAT <- paste0("AT_", model_data_spore$STorAT)
# Assign initial contamination distributions
# ppc
model_data_ppc <- model_data_ppc %>%
rowwise() %>%
mutate(N0 = rnorm(n = 1, mean = 0.38, sd = 1.11))
model_data_ppc <- as.data.frame(model_data_ppc)
# spore
model_data_spore <- model_data_spore %>%
rowwise() %>%
mutate(N0 = rnorm(n = 1, mean = -0.72, sd = 0.99))
rm(list=ls())
# Set work directory
setwd("C:/Users/sujun/Documents/GitHub/Combined-Spoilage-Model-App")
# Load packages
library(dplyr)
library(tidyr)
library(fitdistrplus)
library(tibble)
library(EnvStats)         # to load rtri function
library(truncnorm)        # to load rtruncnorm function
library(jmuOutlier)       # to load rlaplace function
library(formula.tools)    # to load 'rhs'
library(purrr)            # to load 'map'
library(deSolve)          # to load 'ode'
library(rlang)
# Load utility functions
source("UtilityFunctions_dynamic_growth.R")
# Input data
# Growth parameters
data_ppc <- read.csv("InputData/ppc_gp.csv")
data_ppc$mumax <- 0.684 * data_ppc$mumax
data_sporeformer <- read.csv("InputData/sporeformer_gp.csv")
# AT frequency
ppc_ST_freq <- read.csv("InputData/ppc_STfreq_clean.csv")
spore_AT_freq <- read.csv("InputData/spore_ATfreq_clean.csv")
# Set seed
set.seed(1)
# Get mean and sd for PPC growth parameters h0, b, log10Nmax and Topt
data_ppc$h0 <- data_ppc$lag * data_ppc$mumax
Tmin_PPC <- -4.15
T_PPC <- 6
data_ppc$b <- sqrt(data_ppc$mumax/log(10)*24)/(T_PPC - Tmin_PPC) # mumax in log10/day
result_df <- data_ppc %>%
group_by(isolate) %>%
summarise(
Mean_h0 = mean(h0),
StdDev_h0 = sd(h0),
Mean_b = mean(b),
StdDev_b = sd(b),
Mean_LOG10Nmax = mean(LOG10Nmax),
StdDev_LOG10Nmax = sd(LOG10Nmax),
Topt = Topt
) %>%
distinct()
result_df <- as.data.frame(result_df)
result_df$STorAT <- unique(data_ppc$STorAT)
result_df$STorAT <- paste0("ST_", result_df$STorAT)
# Get mean and sd for sporeformer growth parameters h0, b, log10Nmax and Topt
data_sporeformer$h0 <- data_sporeformer$lag * data_sporeformer$mumax
Tmin_spore <- -3.62
T_spore <- 6
data_sporeformer$b <- sqrt(data_sporeformer$mumax/log(10))/(T_spore - Tmin_spore) # mumax in log10/day
result_df_1 <- data_sporeformer %>%
group_by(isolate) %>%
summarise(
Mean_h0 = h0,
StdDev_h0 = mean(result_df$StdDev_h0),
Mean_b = b,
StdDev_b = mean(result_df$StdDev_b),
Mean_LOG10Nmax = LOG10Nmax,
StdDev_LOG10Nmax = mean(result_df$StdDev_LOG10Nmax),
Topt = Topt
) %>%
distinct()
result_df_1 <- as.data.frame(result_df_1)
result_df_1$STorAT <- unique(data_sporeformer$STorAT)
result_df_1$STorAT <- paste0("AT_", result_df_1$STorAT)
# Join growth parameter data
growth_parameter <- rbind(result_df,result_df_1)
# Set up dataframe for simulation (100 lots, 100 units)
n_sim <- 100
n_unit <- 100
lot_id <- rep(seq(1, n_sim), each = n_unit)
unit_id <- rep(seq(1,n_unit), times = n_sim)
data <- data.frame(lot_id, unit_id)
# Temperature profile
# Stage 1: facility storage
## (a)  Sample the temperature distribution
data$T_F <- rep(runif(n_sim*n_unit,min=3.5,max=4.5)) #uniform distribution
## (b) Sample the storage time (in days) distribution
data$t_F <- rep(runif(n_sim*n_unit,min=1,max=2)) #uniform distribution
# Stage 2: transport from facility to retail store
## (a)  Sample the temperature distribution
data$T_T <- rep(rtri(n_sim*n_unit,min=1.7,max=10.0,mode=4.4)) #triangular distribution
## (b) Sample the transportation time (in days) distribution
data$t_T <- rep(rtri(n_sim*n_unit,min=1,max=10,mode=5))
# Stage 3: storage/display at retail store
## (a)  Sample the temperature distribution
data$T_S <- rep(rtruncnorm(n_sim*n_unit,a=-1.4,b=5.4,mean=2.3,sd=1.8)) #truncated normal distribution
## (b) Sample the storage time (in days) distribution
data$t_S <- rep(rtruncnorm(n_sim*n_unit,a=0.042,b=10.0, mean=1.821,sd=3.3)) #truncated normal distribution
## Stage 4: transportation from retail store to home
## (a)  Sample the temperature distribution
data$T_T2 <- rep(rtruncnorm(n_sim*n_unit,a=0,b=10,mean=8.5,sd=1.0)) #truncated normal distribution
## (b) Sample the transportation time (in days) distribution
data$t_T2 <- rep(rtruncnorm(n_sim*n_unit,a=0.01,b=0.24, mean=0.04,sd=0.02)) #truncated normal distribution
## Stage 5: home storage
## (a)  Sample the temperature distribution
temps <- rep(NA, n_sim*n_unit)
for (i in 1:(n_sim*n_unit)){
number <- rlaplace(1,m=4.06,s=2.31)
while (number > 15 | number < -1) {
number <- rlaplace(1,m=4.06,s=2.31) #truncated laplace distribution
}
temps[i] <- number
}
data$T_H <- temps
## (b) Define shelf-life day for all units
## Day 35
data$t_H = 35
# Generate spoilage frequency and assign spoilage types
# PPC Spoilage %
# Good Plant
# data <- data %>%
# group_by(lot_id) %>%
# mutate (P_ppc = runif(1, 0.125, 0.313))
# Medium Plant
# data <- data %>%
# group_by(lot_id) %>%
# mutate(P_ppc = runif(1, 0.367, 0.667))
# Bad Plant
data <- data %>%
group_by(lot_id) %>%
mutate (P_ppc = runif(1, 0.75, 1))
# Sanity check
# data$P_ppc = 0
# data$P_spore = 1
# Assign spoilage type
result_list <- list()
for (i in 1:n_sim) {
data_lot <- subset(data, lot_id == as.character(i))
num_ppc <- round(unique(data_lot$P_ppc) * n_unit)
num_spore_unspoil <- n_unit - num_ppc
spoiler_types <- c(rep("PPC", num_ppc), rep("Spore_Unspoil", num_spore_unspoil))
data_lot$spoilage_type <- sample(spoiler_types, n_unit)
result_list[[i]] <- data_lot
}
data <- do.call(rbind,result_list)
# Assign AT/ST types
# ppc
model_data_ppc <- subset(data, spoilage_type == "PPC")
model_data_ppc$STorAT <- NA
for (i in 1:nrow(model_data_ppc)) {
sampled_value <- sample(ppc_ST_freq$ClosestST, 1, replace = T)
while (sampled_value == "9_23") {
sampled_value <- sample(ppc_ST_freq$ClosestST, 1, replace = T)
}
model_data_ppc$STorAT[i] <- sampled_value
}
model_data_ppc$STorAT <- paste0("ST_", model_data_ppc$STorAT)
# # spore
model_data_spore <- subset(data, spoilage_type == "Spore_Unspoil")
# model_data_spore$STorAT <- rep(179, nrow(model_data_spore))
model_data_spore$STorAT <- sample(spore_AT_freq$ClosestAT, nrow(model_data_spore),replace=T)
model_data_spore$STorAT <- paste0("AT_", model_data_spore$STorAT)
View(model_data_spore)
# spore
N0 = rnorm(n = nrow(model_data_spore), mean = -0.72, sd = 0.99)
N0_MPN <- 10^(model_data_spore$N0)*1900
N0_MPN <- 10^N0*1900
N0_MPN[N0_MPN<1]=0
N0 = N0_MPN/1900
N0[N0 <= 0 ] = 0.01
model_data_spore$N0 = N0
model_data_spore <- as.data.frame(model_data_spore)
View(model_data_spore)
which(model_data_spore$N0<0.01)
N0_MPN = 0
# spore (how to change this part into probability?)
N0 = rnorm(n = nrow(model_data_spore), mean = -0.72, sd = 0.99)
N0_MPN <- 10^N0*1900
N0_MPN
# Assign initial contamination distributions
# ppc
model_data_ppc <- model_data_ppc %>%
rowwise() %>%
mutate(N0 = rnorm(n = 1, mean = 0.38, sd = 1.11))
model_data_ppc <- as.data.frame(model_data_ppc)
View(model_data_ppc)
model_data_ppc$CFU_N0 = 10^(model_data_ppc$N0)*1900
View(model_data_ppc)
which(model_data_ppc$CFU_N0<1)
View(model_data_ppc)
rm(list=ls())
# Set work directory
setwd("C:/Users/sujun/Documents/GitHub/Combined-Spoilage-Model-App")
# Load packages
library(dplyr)
library(tidyr)
library(fitdistrplus)
library(tibble)
library(EnvStats)         # to load rtri function
library(truncnorm)        # to load rtruncnorm function
library(jmuOutlier)       # to load rlaplace function
library(formula.tools)    # to load 'rhs'
library(purrr)            # to load 'map'
library(deSolve)          # to load 'ode'
library(rlang)
# Load utility functions
source("UtilityFunctions_dynamic_growth.R")
# Input data
# Growth parameters
data_ppc <- read.csv("InputData/ppc_gp.csv")
data_ppc$mumax <- 0.684 * data_ppc$mumax
data_sporeformer <- read.csv("InputData/sporeformer_gp.csv")
# AT frequency
ppc_ST_freq <- read.csv("InputData/ppc_STfreq_clean.csv")
spore_AT_freq <- read.csv("InputData/spore_ATfreq_clean.csv")
# Set seed
set.seed(1)
# Get mean and sd for PPC growth parameters h0, b, log10Nmax and Topt
data_ppc$h0 <- data_ppc$lag * data_ppc$mumax
Tmin_PPC <- -4.15
T_PPC <- 6
data_ppc$b <- sqrt(data_ppc$mumax/log(10)*24)/(T_PPC - Tmin_PPC) # mumax in log10/day
result_df <- data_ppc %>%
group_by(isolate) %>%
summarise(
Mean_h0 = mean(h0),
StdDev_h0 = sd(h0),
Mean_b = mean(b),
StdDev_b = sd(b),
Mean_LOG10Nmax = mean(LOG10Nmax),
StdDev_LOG10Nmax = sd(LOG10Nmax),
Topt = Topt
) %>%
distinct()
result_df <- as.data.frame(result_df)
result_df$STorAT <- unique(data_ppc$STorAT)
result_df$STorAT <- paste0("ST_", result_df$STorAT)
# Get mean and sd for sporeformer growth parameters h0, b, log10Nmax and Topt
data_sporeformer$h0 <- data_sporeformer$lag * data_sporeformer$mumax
Tmin_spore <- -3.62
T_spore <- 6
data_sporeformer$b <- sqrt(data_sporeformer$mumax/log(10))/(T_spore - Tmin_spore) # mumax in log10/day
result_df_1 <- data_sporeformer %>%
group_by(isolate) %>%
summarise(
Mean_h0 = h0,
StdDev_h0 = mean(result_df$StdDev_h0),
Mean_b = b,
StdDev_b = mean(result_df$StdDev_b),
Mean_LOG10Nmax = LOG10Nmax,
StdDev_LOG10Nmax = mean(result_df$StdDev_LOG10Nmax),
Topt = Topt
) %>%
distinct()
result_df_1 <- as.data.frame(result_df_1)
result_df_1$STorAT <- unique(data_sporeformer$STorAT)
result_df_1$STorAT <- paste0("AT_", result_df_1$STorAT)
# Join growth parameter data
growth_parameter <- rbind(result_df,result_df_1)
# Set up dataframe for simulation (100 lots, 100 units)
n_sim <- 100
n_unit <- 100
lot_id <- rep(seq(1, n_sim), each = n_unit)
unit_id <- rep(seq(1,n_unit), times = n_sim)
data <- data.frame(lot_id, unit_id)
# Temperature profile
# Stage 1: facility storage
## (a)  Sample the temperature distribution
data$T_F <- rep(runif(n_sim*n_unit,min=3.5,max=4.5)) #uniform distribution
## (b) Sample the storage time (in days) distribution
data$t_F <- rep(runif(n_sim*n_unit,min=1,max=2)) #uniform distribution
# Stage 2: transport from facility to retail store
## (a)  Sample the temperature distribution
data$T_T <- rep(rtri(n_sim*n_unit,min=1.7,max=10.0,mode=4.4)) #triangular distribution
## (b) Sample the transportation time (in days) distribution
data$t_T <- rep(rtri(n_sim*n_unit,min=1,max=10,mode=5))
# Stage 3: storage/display at retail store
## (a)  Sample the temperature distribution
data$T_S <- rep(rtruncnorm(n_sim*n_unit,a=-1.4,b=5.4,mean=2.3,sd=1.8)) #truncated normal distribution
## (b) Sample the storage time (in days) distribution
data$t_S <- rep(rtruncnorm(n_sim*n_unit,a=0.042,b=10.0, mean=1.821,sd=3.3)) #truncated normal distribution
## Stage 4: transportation from retail store to home
## (a)  Sample the temperature distribution
data$T_T2 <- rep(rtruncnorm(n_sim*n_unit,a=0,b=10,mean=8.5,sd=1.0)) #truncated normal distribution
## (b) Sample the transportation time (in days) distribution
data$t_T2 <- rep(rtruncnorm(n_sim*n_unit,a=0.01,b=0.24, mean=0.04,sd=0.02)) #truncated normal distribution
## Stage 5: home storage
## (a)  Sample the temperature distribution
temps <- rep(NA, n_sim*n_unit)
for (i in 1:(n_sim*n_unit)){
number <- rlaplace(1,m=4.06,s=2.31)
while (number > 15 | number < -1) {
number <- rlaplace(1,m=4.06,s=2.31) #truncated laplace distribution
}
temps[i] <- number
}
data$T_H <- temps
## (b) Define shelf-life day for all units
## Day 35
data$t_H = 35
# Generate spoilage frequency and assign spoilage types
# PPC Spoilage %
# Good Plant
# data <- data %>%
# group_by(lot_id) %>%
# mutate (P_ppc = runif(1, 0.125, 0.313))
# Medium Plant
# data <- data %>%
# group_by(lot_id) %>%
# mutate(P_ppc = runif(1, 0.367, 0.667))
# Bad Plant
data <- data %>%
group_by(lot_id) %>%
mutate (P_ppc = runif(1, 0.75, 1))
# Sanity check
# data$P_ppc = 0
# data$P_spore = 1
# Assign spoilage type
result_list <- list()
for (i in 1:n_sim) {
data_lot <- subset(data, lot_id == as.character(i))
num_ppc <- round(unique(data_lot$P_ppc) * n_unit)
num_spore_unspoil <- n_unit - num_ppc
spoiler_types <- c(rep("PPC", num_ppc), rep("Spore_Unspoil", num_spore_unspoil))
data_lot$spoilage_type <- sample(spoiler_types, n_unit)
result_list[[i]] <- data_lot
}
data <- do.call(rbind,result_list)
# Assign AT/ST types
# ppc
model_data_ppc <- subset(data, spoilage_type == "PPC")
model_data_ppc$STorAT <- NA
for (i in 1:nrow(model_data_ppc)) {
sampled_value <- sample(ppc_ST_freq$ClosestST, 1, replace = T)
while (sampled_value == "9_23") {
sampled_value <- sample(ppc_ST_freq$ClosestST, 1, replace = T)
}
model_data_ppc$STorAT[i] <- sampled_value
}
model_data_ppc$STorAT <- paste0("ST_", model_data_ppc$STorAT)
# # spore
model_data_spore <- subset(data, spoilage_type == "Spore_Unspoil")
# model_data_spore$STorAT <- rep(179, nrow(model_data_spore))
model_data_spore$STorAT <- sample(spore_AT_freq$ClosestAT, nrow(model_data_spore),replace=T)
model_data_spore$STorAT <- paste0("AT_", model_data_spore$STorAT)
# Assign initial contamination distributions (how to fix this part?)
# ppc
N0 = rnorm(n = nrow(model_data_ppc), mean = 0.38, sd = 1.11)
N0_MPN <- 10^N0*1900
N0_MPN[N0_MPN<1]=0
N0 = N0_MPN/1900
N0[N0 <= 0] = 0.01 # detection limit
model_data_ppc$N0 = N0
model_data_ppc <- as.data.frame(model_data_ppc)
# spore
N0 = rnorm(n = nrow(model_data_spore), mean = -0.72, sd = 0.99)
N0_MPN <- 10^N0*1900
N0_MPN[N0_MPN<1]=0
N0 = N0_MPN/1900
N0[N0 <= 0] = 0.01 # detection limit
model_data_spore$N0 = N0
model_data_spore <- as.data.frame(model_data_spore)
# join data
model_data <- rbind(model_data_ppc,model_data_spore)
View(model_data)
load("~/GitHub/Combined-Spoilage-Model-App/PPC_simulation_6dC_21d.RData")
hist(df_D7, main = "Histogram of PPC Count (Simulated D7)", xlab = "log10CFU/mL", breaks = 25)
hist(df_D7, main = "Histogram of PPC Count (Simulated D7)", xlab = "log10CFU/mL", breaks = 25)
hist(df_D7$logN, main = "Histogram of PPC Count (Simulated D7)", xlab = "log10CFU/mL", breaks = 25)
median(df_D7$logN)
quantile(df_D7$logN, 0.25)
quantile(df_D7$logN, 0.75)
sum(df_D7$logN>6)/10000
hist(df_D14$logN, main = "Histogram of PPC Count (Simulated D14)", xlab = "log10CFU/mL", breaks = 25)
median(df_D14$logN)
quantile(df_D14$logN, 0.25)
quantile(df_D14$logN, 0.75)
sum(df_D14$logN>6)/10000
hist(df_D21$logN, main = "Histogram of PPC Count (Simulated D14)", xlab = "log10CFU/mL", breaks = 25)
hist(df_D21$logN, main = "Histogram of PPC Count (Simulated D21)", xlab = "log10CFU/mL", breaks = 25)
median(df_D21$logN)
quantile(df_D21$logN, 0.25)
quantile(df_D21$logN, 0.75)
sum(df_D21$logN>6)/10000
rm(list=ls())
load("~/GitHub/Combined-Spoilage-Model-App/Spore_simulation_6dC_21d.RData")
hist(SPC_D7_sim, main = "Histogram of SPC Count (Simulated D7)", xlab = "log10CFU/mL", breaks = 25)
median(SPC_D7_sim)
quantile(SPC_D7_sim, 0.25)
quantile(SPC_D7_sim, 0.75)
sum(SPC_D7_sim>6)/10000
hist(SPC_D14_sim, main = "Histogram of SPC Count (Simulated D14)", xlab = "log10CFU/mL", breaks = 25)
median(SPC_D14_sim)
quantile(SPC_D14_sim, 0.25)
quantile(SPC_D14_sim, 0.75)
sum(SPC_D14_sim>6)/10000
hist(SPC_D21_sim, main = "Histogram of SPC Count (Simulated D21)", xlab = "log10CFU/mL", breaks = 25)
median(SPC_D21_sim)
quantile(SPC_D21_sim, 0.25)
quantile(SPC_D21_sim, 0.75)
sum(SPC_D21_sim>6)/10000
load("~/GitHub/eCommerce/New/temp_profile.RData")

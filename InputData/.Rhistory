for (i in 1:n_sim*n_unit){
number <- rlaplace(1,m=4.06,s=2.31)
while (number > 15 | number < -1) {
number <- rlaplace(1,m=4.06,s=2.31) #truncated laplace distribution
}
temps[i] <- number
}
data$T_H <- temps
## (b) Define t_H as 35 days for all units
data$t_H <- rep(35, each = n_sim*n_unit)
## Model temperature profiles of n_sim*n_unit HTST milk
env_cond_time <- matrix(c(rep(0,n_sim*n_unit),
data$t_F,
data$t_F+0.001,
data$t_F + data$t_T,
data$t_F + data$t_T+0.001,
data$t_F + data$t_T + data$t_S,
data$t_F + data$t_T + data$t_S+0.001,
data$t_F + data$t_T + data$t_S + data$t_T2,
data$t_F + data$t_T + data$t_S + data$t_T2+0.001,
data$t_F + data$t_T + data$t_S + data$t_T2 + data$t_H), ncol = 10)
env_cond_temp <- matrix(c(data$T_F,
data$T_F,
data$T_T,
data$T_T,
data$T_S,
data$T_S,
data$T_T2,
data$T_T2,
data$T_H,
data$T_H), ncol = n_sim*n_unit)
# Generate spoilage frequency and assign spoilage types
num_ppc <- round(40/ 100 * n_sim * n_unit)
num_spore <- round(40/ 100 * n_sim * n_unit)
num_no_spoil <- n_sim*n_unit - num_ppc - num_spore
data$spoilage_type <- c(rep("PPC", num_ppc), rep("Spore", num_spore), rep("No Spoil", num_no_spoil))
# Assign AT/ST types
# ppc
model_data_ppc <- subset(data, spoilage_type == "PPC")
model_data_ppc$STorAT <- NA
for (i in 1:num_ppc) {
sampled_value <- sample(ppc_ST_freq$ClosestST, 1, replace = T)
while (sampled_value == "9_23") {
sampled_value <- sample(ppc_ST_freq$ClosestST, 1, replace = T)
}
model_data_ppc$STorAT[i] <- sampled_value
}
model_data_ppc$STorAT <- paste0("ST_", model_data_ppc$STorAT)
# spore
model_data_spore <- subset(data, spoilage_type == "Spore")
model_data_spore$STorAT <- sample(spore_AT_freq$ClosestAT, num_spore,replace=T)
model_data_spore$STorAT <- paste0("AT_", model_data_spore$STorAT)
# no spoil
model_data_noSpoil <- subset(data, spoilage_type == "No Spoil")
model_data_noSpoil$STorAT <- rep("NS_0", num_no_spoil)
model_data_noSpoil
View(data)
rm(list=ls())
# Set up dataframe for simulation (100 lots, 100 units)
n_sim <- 100
n_unit <- 100
lot_id <- rep(seq(1, n_sim), each = n_unit)
unit_id <- rep(seq(1,n_unit), times = n_sim)
data <- data.frame(lot_id, unit_id)
# Stage 1: facility storage
## (a)  Sample the temperature distribution
data$T_F <- rep(runif(n_sim*n_unit,min=3.5,max=4.5)) #uniform distribution
## (b) Sample the storage time (in days) distribution
data$t_F <- rep(runif(n_sim*n_unit,min=1,max=2)) #uniform distribution
# Stage 2: transport from facility to retail store
## (a)  Sample the temperature distribution
data$T_T <- rep(rtri(n_sim*n_unit,min=1.7,max=10.0,mode=4.4)) #triangular distribution
## (b) Sample the transportation time (in days) distribution
data$t_T <- rep(rtri(n_sim*n_unit,min=1,max=10,mode=5))
# Stage 3: storage/display at retail store
## (a)  Sample the temperature distribution
data$T_S <- rep(rtruncnorm(n_sim*n_unit,a=-1.4,b=5.4,mean=2.3,sd=1.8)) #truncated normal distribution
## (b) Sample the storage time (in days) distribution
data$t_S <- rep(rtruncnorm(n_sim*n_unit,a=0.042,b=10.0, mean=1.821,sd=3.3)) #truncated normal distribution
## Stage 4: transportation from retail store to home
## (a)  Sample the temperature distribution
data$T_T2 <- rep(rtruncnorm(n_sim*n_unit,a=0,b=10,mean=8.5,sd=1.0)) #truncated normal distribution
## (b) Sample the transportation time (in days) distribution
data$t_T2 <- rep(rtruncnorm(n_sim*n_unit,a=0.01,b=0.24, mean=0.04,sd=0.02)) #truncated normal distribution
## Stage 5: home storage
## (a)  Sample the temperature distribution
temps <- rep(NA, n_sim*n_unit)
for (i in 1:n_sim*n_unit){
number <- rlaplace(1,m=4.06,s=2.31)
while (number > 15 | number < -1) {
number <- rlaplace(1,m=4.06,s=2.31) #truncated laplace distribution
}
temps[i] <- number
}
temps <- rep(NA, 10000)
for (i in 1:10000){
number <- rlaplace(1,m=4.06,s=2.31)
while (number > 15 | number < -1) {
number <- rlaplace(1,m=4.06,s=2.31) #truncated laplace distribution
}
temps[i] <- number
}
data$T_H <- temps
# Load packages
library(dplyr)
library(tidyr)
library(fitdistrplus)
library(tibble)
library(EnvStats)         # to load rtri function
library(truncnorm)        # to load rtruncnorm function
library(jmuOutlier)       # to load rlaplace function
library(formula.tools)    # to load 'rhs'
library(purrr)            # to load 'map'
library(deSolve)          # to load 'ode'
library(rlang)
# load utility functions
source("UtilityFunctions_dynamic_growth.R")
# Input data
# Initial contamination levels
ppc_initial <- read.csv("ppc_initial.csv")
spore_initial <- read.csv("spore_initial.csv")
no_spoil_initial <- read.csv("initialcounts_060622.csv")
# Growth parameters
data_ppc <- read.csv("ppc_gp.csv")
data_sporeformer <- read.csv("sporeformer_gp.csv")
data_nospoil <- read.csv("noSpoil_growthparameters.csv")
# AT frequency
ppc_ST_freq <- read.csv("ppc_STfreq_clean.csv")
spore_AT_freq <- read.csv("spore_ATfreq_clean.csv")
# Generate input parameter distributions
# Generate uncertainty distributions for initial contamination levels
# PPC initial contamination by bootstrapping
means <- numeric(1000)
std_deviations <- numeric(1000)
for (i in 1:1000) {
sample <- sample(ppc_initial$LOG.initial, size = nrow(ppc_initial), replace = TRUE)
sample_mean <- mean(sample)
sample_std <- sd(sample)
means[i] <- sample_mean
std_deviations[i] <- sample_std
}
mean_ppc_mean <- mean(means)
sd_ppc_mean <- sd(means)
mean_ppc_sd <- mean(std_deviations)
sd_ppc_sd <- sd(std_deviations)
# Generate normal distribution for ppc_mean
ppc_mean_distr <- rnorm(1000, mean_ppc_mean, sd_ppc_mean)
# Generate normal distribution for ppc_sd
ppc_sd_distr <- rnorm(1000, mean_ppc_sd, sd_ppc_sd)
# Sporeformer initial contamination by bootstrapping
means <- numeric(1000)
std_deviations <- numeric(1000)
for (i in 1:1000) {
sample <- sample(spore_initial$log10MPN, size = nrow(spore_initial), replace = TRUE)
sample_mean <- mean(sample)
sample_std <- sd(sample)
means[i] <- sample_mean
std_deviations[i] <- sample_std
}
mean_spore_mean <- mean(means)
sd_spore_mean <- sd(means)
mean_spore_sd <- mean(std_deviations)
sd_spore_sd <- sd(std_deviations)
# Generate normal distribution for spore_mean
spore_mean_distr <- rnorm(1000, mean_spore_mean, sd_spore_mean)
# Generate normal distribution for spore_sd
spore_sd_distr <- rnorm(1000, mean_spore_sd, sd_spore_sd)
# Get mean and sd for PPC growth parameters h0, b, log10Nmax
data_ppc$h0 <- data_ppc$lag * data_ppc$mumax
Tmin_PPC <- -4.15
T_PPC <- 6
data_ppc$b <- sqrt(data_ppc$mumax/log(10)*24)/(T_PPC - Tmin_PPC) # mumax in log10/day
result_df <- data_ppc %>%
group_by(isolate) %>%
summarise(
Mean_h0 = mean(h0),
StdDev_h0 = sd(h0),
Mean_b = mean(b),
StdDev_b = sd(b),
Mean_LOG10Nmax = mean(LOG10Nmax),
StdDev_LOG10Nmax = sd(LOG10Nmax)
)
result_df <- as.data.frame(result_df)
result_df$STorAT <- unique(data_ppc$STorAT)
# Get mean and sd for sporeformer growth parameters h0, b, log10Nmax
data_sporeformer$h0 <- data_sporeformer$lag * data_sporeformer$mumax
Tmin_spore <- -3.62
T_spore <- 6
data_sporeformer$b <- sqrt(data_sporeformer$mumax/log(10))/(T_spore - Tmin_spore) # mumax in log10/day
result_df_1 <- data_sporeformer %>%
group_by(isolate) %>%
summarise(
Mean_h0 = h0,
StdDev_h0 = mean(result_df$StdDev_h0),
Mean_b = b,
StdDev_b = mean(result_df$StdDev_b),
Mean_LOG10Nmax = LOG10Nmax,
StdDev_LOG10Nmax = mean(result_df$StdDev_LOG10Nmax)
)
result_df_1 <- as.data.frame(result_df_1)
result_df_1$STorAT <- unique(data_sporeformer$STorAT)
# Set up dataframe for simulation (100 lots, 100 units)
n_sim <- 100
n_unit <- 100
lot_id <- rep(seq(1, n_sim), each = n_unit)
unit_id <- rep(seq(1,n_unit), times = n_sim)
data <- data.frame(lot_id, unit_id)
# Temperature profile
## Set seed
set.seed(1)
# Stage 1: facility storage
## (a)  Sample the temperature distribution
data$T_F <- rep(runif(n_sim*n_unit,min=3.5,max=4.5)) #uniform distribution
## (b) Sample the storage time (in days) distribution
data$t_F <- rep(runif(n_sim*n_unit,min=1,max=2)) #uniform distribution
# Stage 2: transport from facility to retail store
## (a)  Sample the temperature distribution
data$T_T <- rep(rtri(n_sim*n_unit,min=1.7,max=10.0,mode=4.4)) #triangular distribution
## (b) Sample the transportation time (in days) distribution
data$t_T <- rep(rtri(n_sim*n_unit,min=1,max=10,mode=5))
# Stage 3: storage/display at retail store
## (a)  Sample the temperature distribution
data$T_S <- rep(rtruncnorm(n_sim*n_unit,a=-1.4,b=5.4,mean=2.3,sd=1.8)) #truncated normal distribution
## (b) Sample the storage time (in days) distribution
data$t_S <- rep(rtruncnorm(n_sim*n_unit,a=0.042,b=10.0, mean=1.821,sd=3.3)) #truncated normal distribution
## Stage 4: transportation from retail store to home
## (a)  Sample the temperature distribution
data$T_T2 <- rep(rtruncnorm(n_sim*n_unit,a=0,b=10,mean=8.5,sd=1.0)) #truncated normal distribution
## (b) Sample the transportation time (in days) distribution
data$t_T2 <- rep(rtruncnorm(n_sim*n_unit,a=0.01,b=0.24, mean=0.04,sd=0.02)) #truncated normal distribution
## Stage 5: home storage
## (a)  Sample the temperature distribution
temps <- rep(NA, 10000)
for (i in 1:10000){
number <- rlaplace(1,m=4.06,s=2.31)
while (number > 15 | number < -1) {
number <- rlaplace(1,m=4.06,s=2.31) #truncated laplace distribution
}
temps[i] <- number
}
data$T_H <- temps
## (b) Define t_H as 35 days for all units
data$t_H <- rep(35, each = n_sim*n_unit)
## Model temperature profiles of n_sim*n_unit HTST milk
env_cond_time <- matrix(c(rep(0,n_sim*n_unit),
data$t_F,
data$t_F+0.001,
data$t_F + data$t_T,
data$t_F + data$t_T+0.001,
data$t_F + data$t_T + data$t_S,
data$t_F + data$t_T + data$t_S+0.001,
data$t_F + data$t_T + data$t_S + data$t_T2,
data$t_F + data$t_T + data$t_S + data$t_T2+0.001,
data$t_F + data$t_T + data$t_S + data$t_T2 + data$t_H), ncol = 10)
env_cond_temp <- matrix(c(data$T_F,
data$T_F,
data$T_T,
data$T_T,
data$T_S,
data$T_S,
data$T_T2,
data$T_T2,
data$T_H,
data$T_H), ncol = n_sim*n_unit)
# Generate spoilage frequency and assign spoilage types
num_ppc <- round(40/ 100 * n_sim * n_unit)
num_spore <- round(40/ 100 * n_sim * n_unit)
num_no_spoil <- n_sim*n_unit - num_ppc - num_spore
data$spoilage_type <- c(rep("PPC", num_ppc), rep("Spore", num_spore), rep("No Spoil", num_no_spoil))
# Assign AT/ST types
# ppc
model_data_ppc <- subset(data, spoilage_type == "PPC")
model_data_ppc$STorAT <- NA
for (i in 1:num_ppc) {
sampled_value <- sample(ppc_ST_freq$ClosestST, 1, replace = T)
while (sampled_value == "9_23") {
sampled_value <- sample(ppc_ST_freq$ClosestST, 1, replace = T)
}
model_data_ppc$STorAT[i] <- sampled_value
}
model_data_ppc$STorAT <- paste0("ST_", model_data_ppc$STorAT)
# spore
model_data_spore <- subset(data, spoilage_type == "Spore")
model_data_spore$STorAT <- sample(spore_AT_freq$ClosestAT, num_spore,replace=T)
model_data_spore$STorAT <- paste0("AT_", model_data_spore$STorAT)
# no spoil
model_data_noSpoil <- subset(data, spoilage_type == "No Spoil")
model_data_noSpoil$STorAT <- rep("NS_0", num_no_spoil)
# join data
model_data <- rbind(model_data_ppc,model_data_spore,model_data_noSpoil)
model_data
result_df_1
result_df$STorAT <- paste0("ST_", result_df$STorAT)
result_df
result_df_1$STorAT <- paste0("AT_", result_df_1$STorAT)
data_nospoil
model_data_noSpoil$STorAT
gp_noSpoil <- read.csv("NoSpoil_gp.csv")
gp_noSpoil
colnames(gp_noSpoil)[1] <- "isolate"
gp_noSpoil
# Join growth parameter data
growth_parameter <- rbind(result_df,result_df_1,gp_noSpoil)
growth_parameter
# Generate allele index
model_data$allele_index <- match(model_data$STorAT, growth_parameter$STorAT)
model_data
length(growth_parameter$STorAT)
max(model_data$allele_index)
model_data
model_data$ppc_initial_mean <- ifelse(model_data$spoilage_type == "PPC", sample(ppc_mean_distr, 1), model_data$ppc_initial_mean)
model_data$ppc_inital_sd <- ifelse(model_data$spoilage_type == "PPC", sample(ppc_sd_distr, 1), model_data$ppc_inital_sd)
model_data$spoilage_type
View(model_data)
# Assign initial contamination distributions to 100 lots
ppc_initial_mean <- sample(ppc_mean_distr, 1)
ppc_inital_sd <- sample(ppc_sd_distr, 1)
model_data_ppc <- model_data %>%
filter(spoilage_type == "PPC") %>%
distinct(lot_id)
model_data_ppc
model_data_ppc$initial_mean <- ppc_initial_mean
model_data_ppc
ppc_initial_mean <- sample(ppc_mean_distr, nrow(model_data_ppc))
ppc_initial_mean
ppc_inital_sd <- sample(ppc_sd_distr, nrow(model_data_ppc))
model_data_ppc$initial_mean <- ppc_initial_mean
model_data_ppc$initial_sd <- ppc_initial_sd
ppc_inital_sd <- sample(ppc_sd_distr, nrow(model_data_ppc))
model_data_ppc$initial_sd <- ppc_initial_sd
ppc_inital_sd
ppc_initial_sd <- sample(ppc_sd_distr, nrow(model_data_ppc))
model_data_ppc$initial_sd <- ppc_initial_sd
model_data_ppc
model_data_ppc$spoilage_type <- "PPC"
model_data_ppc
model_data_spore <- model_data %>%
filter(spoilage_type == "Spore") %>%
distinct(lot_id)
model_data_spore
spore_initial_mean <- sample(spore_mean_distr, nrow(model_data_spore))
spore_inital_sd <- sample(spore_sd_distr, nrow(model_data_spore))
model_data_spore$initial_mean <- spore_initial_mean
model_data_spore$initial_sd <- spore_initial_sd
spore_initial_sd <- sample(spore_sd_distr, nrow(model_data_spore))
model_data_spore$initial_mean <- spore_initial_mean
model_data_spore$initial_sd <- spore_initial_sd
model_data_spore$spoilage_type <- "Spore"
# no Spoil
model_data_noSpoil <- model_data %>%
filter(spoilage_type == "No Spoil") %>%
distinct(lot_id)
model_data_noSpoil
model_data_ <- mnoSpoilodel_data %>%
filter(spoilage_type == "No Spoil") %>%
distinct(lot_id)
model_data_noSpoil <- model_data %>%
filter(spoilage_type == "No Spoil") %>%
distinct(lot_id)
no_spoil_initial <- no_spoil_initial %>%
filter(Day_Initial_Actual<=7)%>%
filter(spoilagetype_actual=="noSpoil")
noSpoil_nfit  <- fitdist(log10(no_spoil_initial$SPC_DI), "norm")
model_data_noSpoil$initial_mean <- noSpoil_nfit$estimate[1]
model_data_noSpoil$initial_sd <- noSpoil_nfit$estimate[2]
model_data_noSpoil$spoilage_type <- "No Spoil"
# join data
initial_distr <- rbind(model_data_ppc,model_data_spore,model_data_noSpoil)
initial_distr
View(model_data)
View(growth_parameter)
growth_parameter$Mean_h0[model_data$allele_index]
growth_parameter$Mean_h0[model_data$allele_index][1]
growth_parameters
# Assign growth parameters
model_data$h0 <- rnorm(1, mean = growth_parameter$Mean_h0[model_data$allele_index], sd = growth_parameter$StdDev_h0[model_data$allele_index])
model_data
model_data$h0
# Assign growth parameters
model_data$h0 <- rnorm(10000, mean = growth_parameter$Mean_h0[model_data$allele_index], sd = growth_parameter$StdDev_h0[model_data$allele_index])
model_data$h0
mean
growth_parameter$Mean_h0[model_data$allele_index]
model_data$h0
growth_parameter$Mean_h0[model_data$allele_index][1]
growth_parameter$StdDev_h0[model_data$allele_index][1]
model_data$h0[1] <- rnorm(1, mean = growth_parameter$Mean_h0[model_data$allele_index][1],
sd = growth_parameter$StdDev_h0[model_data$allele_index][1])
model_data
head(model_data)
random_samples <- list()
for (i in 1:10000) {
mean_value <- growth_parameter$Mean_h0[model_data$allele_index][i]
sd_value <- growth_parameter$StdDev_h0[model_data$allele_index][i]
random_sample <- rnorm(1, mean = mean_value, sd = sd_value)
random_samples[[i]] <- random_sample
}
random_samples
sd_value
mean_value
model_data$h0 <- rnorm(10000, growth_parameter$Mean_h0[model_data$allele_index],
growth_parameter$StdDev_h0[model_data$allele_index])
View(h0)
View(model_data)
# Assign growth parameters
model_data$h0 <- rtruncnorm(10000, a = 0.0001,
growth_parameter$Mean_h0[model_data$allele_index],
growth_parameter$StdDev_h0[model_data$allele_index])
View(model_data)
model_data$h0 <- rtruncnorm(10000, a = 0,
growth_parameter$Mean_h0[model_data$allele_index],
growth_parameter$StdDev_h0[model_data$allele_index])
View(model_data)
# Assign growth parameters
model_data$h0 <- rnorm(10000, a = 0,
growth_parameter$Mean_h0[model_data$allele_index],
growth_parameter$StdDev_h0[model_data$allele_index])
# Assign growth parameters
model_data$h0 <- rnorm(10000,
growth_parameter$Mean_h0[model_data$allele_index],
growth_parameter$StdDev_h0[model_data$allele_index])
View(h0)
View(model_data)
model_data$h0[which(model_data$STorAT == "7")]
model_data$h0[which(model_data$STorAT == "ST23")]
model_data$h0[which(model_data$STorAT == "ST_23")]
# Assign growth parameters
model_data$h0 <- rtruncnorm(n = 10000,
a = 0,
mean = growth_parameter$Mean_h0[model_data$allele_index],
sd = growth_parameter$StdDev_h0[model_data$allele_index])
View(model_data)
model_data$b <- rtruncnorm(n = 10000,
a = 0,
mean = growth_parameter$Mean_b[model_data$allele_index],
sd = growth_parameter$StdDev_b[model_data$allele_index])
model_data$b <- rtruncnorm(n = 10000,
a = 0,
mean = growth_parameter$Mean_b[model_data$allele_index],
sd = growth_parameter$StdDev_b[model_data$allele_index])
model_data$Nmax <- rnorm(n = 10000,
mean = growth_parameter$Mean_LOG10Nmax[model_data$allele_index],
sd = growth_parameter$StdDev_LOG10Nmax[model_data$allele_index])
View(model_data)
model_data$lot_id
View(model_data)
which(model_data$b=0)
which(model_data$b=="0")
View(initial_distr)
model_data$lot_id
model_data$N0 <- rnorm(n = 10000,
mean = initial_distr$initial_mean[model_data$lot_id],
sd = initial_distr$initial_sd[model_data$lot_id])
View(model)
View(model_data)
initial_distr$initial_mean[model_data$lot_id[1]
]
initial_distr
model_data$Q0 <- 1/(exp(model_data$h0)-1)
View(model_data)
model_data1 = subset(model_data, spoilage_type == "PPC")
final_conc <- model_data1 %>%
rowwise() %>%
mutate(final_conc_isolate = list(lapply(1:10000, function(j) {
my_primary <- list(mu_opt = 1, Nmax = Nmax, N0 = N0[j], Q0 = Q0)
sec_temperature <- list(model = "reducedRatkowsky", xmin = Tmin, b = b, clade = Clade)
my_secondary <- list(temperature = sec_temperature)
growth <- predict_dynamic_growth(times = env_cond_time[j,],
env_conditions = tibble(time = env_cond_time[j,],
temperature = env_cond_temp[j,]),
my_primary,
my_secondary)
sim <- growth$simulation
return(tail(sim$logN, 1))
}))) %>%
pull(final_conc_isolate)
# Convert the list of 16 elements into a matrix
matrix <- t(sapply(final_conc, function(x) sapply(x, tail, n=1)))
model_data$Nmax
final_conc <- model_data1 %>%
rowwise() %>%
mutate(final_conc_isolate = list(lapply(1:10000, function(j) {
my_primary <- list(mu_opt = 1, Nmax = Nmax[j], N0 = N0[j], Q0 = Q0[j])
sec_temperature <- list(model = "reducedRatkowsky", xmin = Tmin, b = b, clade = Clade)
my_secondary <- list(temperature = sec_temperature)
growth <- predict_dynamic_growth(times = env_cond_time[j,],
env_conditions = tibble(time = env_cond_time[j,],
temperature = env_cond_temp[j,]),
my_primary,
my_secondary)
sim <- growth$simulation
return(tail(sim$logN, 1))
}))) %>%
pull(final_conc_isolate)
# Convert the list of 16 elements into a matrix
matrix <- t(sapply(final_conc, function(x) sapply(x, tail, n=1)))
rm("model_data1")
View(initial_distr)
hist(initial_distr$initial_mean)
hist(initial_distr$initial_sd)
hist(initial_distr$initial_mean)
hist(initial_distr$initial_mean, breaks = 10)
hist(initial_distr$initial_mean, breaks = 20)
subset_data = initial_distr %>% filter(initial_mean <0)
initial_distr %>% filter(initial_mean <0) %>% pull(initial_sd) %>% hist()
hist(initial_distr$initial_mean, breaks = 20)
initial_distr %>% filter(initial_mean >0 & initial_mean <1) %>% pull(initial_sd) %>% hist()
hist(initial_distr$initial_mean, breaks = 20)
initial_distr %>% filter(initial_mean >0 & initial_mean <1) %>% pull(initial_sd) %>% hist()
initial_distr %>% filter(initial_mean >0 & initial_mean <1) %>% pull(initial_sd) %>% hist(., breaks = 20)
nrow(ppc_initial)
nrow(spore_initial)
